/* Clase constructora encargada de hacer las consultas a los archivos, 
   obtiendo datos y modificandolos usando el DOM. */
function imcDebugModel(selectorsNS) 
{
    if ( !this.init ) {
        alert('Debe ser un objeto, se debe instanciar.');
    }
    this.init(selectorsNS);
}

imcDebugModel.prototype = 
{

    /* Metodo inicializador */
    init: function(selectorsNS) 
    {

        this.host = 'imcmexico.com';
        if( this.host.indexOf(location.toString()) == -1 ) {
            /* alert('El host no coincide con '+this.host); */
        }
        this.selectors = {
            ns        : selectorsNS,
            queryFiles: {}
        };
        this.machinesData = {};
        
        /* Se definen los archivos para las consultas de tipos, marcas y modelos de maquinas. */
        var ns         = this.selectors.ns;
        var queryFiles = this.selectors.queryFiles;
 
        queryFiles[ns[0]] = 'tiposJX.php';
        queryFiles[ns[1]] = 'marcasJX.php';
        queryFiles[ns[2]] = 'modelosJX.php';
        
        /* Creamos el iframe para las consultas de los datos. */
        jQuery('body').append('<iframe name="imcDebugModel_queryFrame" style="display:none;"></iframe>');
        this.queryFrame = window.imcDebugModel_queryFrame;
        this.$queryFrame= jQuery('iframe[name=imcDebugModel_queryFrame]');
    },

    /* Devulve los datos para X selector (tipos, marcas y modelos) */
    getSelectorData: function(selectorNS, urlGetData, onreadyFunction) 
    {
        var queryFile = this.selectors.queryFiles[selectorNS];
        
        /* Abrimos el archivo con la consulta del selector y definimos la funcion al cargarse el contenido. */
        this.$queryFrame.attr('src', queryFile+'?'+urlGetData);
        var This = this;
        
        this.$queryFrame.unbind('load');
        this.$queryFrame.load( function() {
        
            /* Filas contenedoras de los datos para tipos, marcas y modelos. */
            var $dataRows = jQuery('.itemlistagen', This.queryFrame.document);
            var fixedData = [];
            
            /* Guardamos en fixedData el valor, texto y numero que existe de cada tipo, marca o modelo. */
            jQuery.each($dataRows, function(i, row){
                var $row   = jQuery(row);
                var value  = jQuery.trim( $row.find('td:first').text() );
                var text   = value;
                var number = jQuery.trim( $row.find('td:last').text() ); 

                if ( value ) {
                    fixedData.push({value: value, text: value, number: number}); 
                }
            });
            
            /* Llamamos la funcion argumentada y pasamos el resultado obtenido. */
            onreadyFunction(fixedData);
        });
    },

    fillMachinesData: function(selectorsConfig, successFunction) {
            /* Guarda en machinesData, la ruta que tendrán las máquinas de cada modelo en el siguiente orden 
                { 
                    tipo1: { 
                        marca1: { 
                            modelo1: [] 
                        } 
                    },
                    tipo2: {...}, 
                    ...
                } 
               Los datos que se descargan usando getSelectorData que los devuelve asi [{value:'', text:'', number: n}, ...] y se arreglan como arriba se muestra..
            */
            var This = this;
            var trackingData 
            jQuery.each(this.machinesData, function(){

            });
    }

};

/* Clase constructora encarga de controlar el modelo y la vista, 
   quien decidira que accion tomar afectando la base de datos y la vista de la aplicación. */
function imcDebugController() 
{
    if ( !this.init ) {
        alert('Debe ser un objeto, se debe instanciar.');
    }
    this.init();
}

imcDebugController.prototype =  
{

    /* Inicializador */
    init: function()
    {

        this.selectors = {
        /* Namespaces para los tipos, marcas y modelos */
            ns   : ['type', 'mark', 'model'],
        /* Texto de salida para leer los nombres de selectores */
            es   : ['tipo', 'marca', 'modelo']
        };

        this.debugConfig = {
            selectors : {'type': '', 'mark': '', 'model': ''},
            phases    : {phase1: false, phase2: false, phase3: false}
        };
        /* Se crean los objetos para el modelo y la vista y se ejecuta la accion por default. */
        this.model       = new imcDebugModel(this.selectors.ns);
        this.view        = new imcDebugView(this, this.selectors.ns, this.selectors.es);
        this.indexAction();
    },
    
    /* Acción por default */
    indexAction: function()
    {
        /* Accionamos el selectAction por default al selector de tipos de máquinas. */ 
        this.fillSelectorAction(this.selectors.ns[0]);
    },

    selectSelectorAction: function(selectorNS, value)
    {
        /* Guardamos la configuracion del selector seleccionado */
        this.debugConfig.selectors[selectorNS] = value;
        
        /* guardamos los valores de los selectores en los datos finales para filtrar la depuracion de maquinas. */
        this.setMachinesDataBeforeDebugging();

        /* Si no hay valor seleccionado evitamos un error tratando de llenar el siguiente selector. */
        if ( ! value ) {
            return;
        }

        /* SI hay un selector despues del accionado entonces se llena el siguiente. */
        var selectorIndex = jQuery.inArray(selectorNS, this.selectors.ns);
        var nextSelector  = this.selectors.ns[selectorIndex+1];
        if ( nextSelector ) {
            this.fillSelectorAction(nextSelector);
        }

    },

    setMachinesDataBeforeDebugging: function() {
        /* Guarda los datos de las maquinas que se buscaran, asi se busca donde se selecciona y no tener que buscar en todos los tipos, marcas y modelos 
           a la hora de comenzar la depuracion.*/
        var This          = this;
        var trackingData  = this.model.machinesData = {};
        var lastSelector  = this.selectors.ns.slice(-1);

        jQuery.each(this.debugConfig.selectors, function(ns, selectorValue){
            /* Si es el modelo entonces se le asigna como array de lo contrario como clase. */
            var objectType = lastSelector == ns ? [] : {};

            if ( ! selectorValue ) {;
                return false;
            }

            trackingData[selectorValue] = objectType;
            /* Se sube un nivel para seguir el rastreo hasta el ultimo selector seleccionado. */
            trackingData = trackingData[selectorValue];
        });
    },

    fillSelectorAction: function(selectorNS) {
        var This = this;
        var urlGetData = 'tipo='+this.debugConfig.selectors[this.selectors.ns[0]]
                         +'&marca='+this.debugConfig.selectors[this.selectors.ns[1]];

        /* Mostramos el indicador de que algo anda en proceso. */
        this.view.showProcessIndicator(true);
        this.model.getSelectorData(selectorNS, urlGetData, function(resultData) {
            /* Llenamos el selector con el mismo orden del resultData, es decir [{value: '', text: '', number: n }, {}, ...].  */
            This.view.fillSelector(selectorNS, resultData);
            /* Quitamos el efecto de operación en proceso. */
            This.view.showProcessIndicator(false);
        });  
    },

    checkedPhaseAction: function(phaseNS, checked) {
        this.debugConfig.phases[phaseNS] = checked;
    },

    startDebuggingAction: function() {
        /* Mostramos el indicador de proceso. */
        this.view.showProcessIndicator(true);
        /* Llenamos los datos faltantes para la depuracion, marcando el rastreo donde se encuentra cada maquina. */
        this.model.fillTrackingData(This.debugConfig.selectors, function(){
            /* Quitamos el indicador de proceso. */
            this.view.showProcessIndicator(false);           
        });
    },

};
    
/* Clase constructora encarga de manipular y crear el DOM y salida de texto para la aplicación. */
function imcDebugView(Controller, selectorsNS, selectorsES) 
{
    if ( !this.init ) {
        alert('Debe ser un objeto, se debe instanciar.');
    }
    this.init(Controller, selectorsNS, selectorsES);
}
    
imcDebugView.prototype = 
{
    
    /* Inicializador */
    init: function(Controller, selectorsNS, selectorsES) 
    {
        this.Controller = Controller;
        this.selectors = {
            ns: selectorsNS,
            es: selectorsES
        };
        this.processInterval = '';

        /* Definiendo los identificadores para el DOM de la aplicación.*/
        this.domNSID = 'imcDebugView';
        this.domIDs  = {
            ct         : this.domNSID,
            ctSettings  : this.domNSID+'-settings',
            ctSelectors: this.domNSID+'-selectors',
            ctPhases   : this.domNSID+'-phases',
            ctControls : this.domNSID+'-controls',
            phase1     : this.domNSID+'-phase1',
            phase2     : this.domNSID+'-phase2',
            phase3     : this.domNSID+'-phase3',
            close      : this.domNSID+'-close',
            start      : this.domNSID+'-start',
            pause      : this.domNSID+'-pause',
            process    : this.domNSID+'-process'
        };

        /* Identificadores y codigo del DOM para los selectores dependiendo de la cantidad de los mismos. */
        var selectorsDomCode = ''; var This = this;
        jQuery.each(this.selectors.ns, function(i, ns) {
            This.domIDs[ns]   = This.domNSID+'-'+ns;
            selectorsDomCode += '           <select id="'+This.domIDs[ns]+'"></select>\n';
        });

        /* Identificadores para los checkbox para las fases a depurar. Que son 3. */
        var phasesCheckBoxesDomCode = '', pCBDCSeparators = ['           ', '           | ', '           | '], This = this;
        jQuery.each(pCBDCSeparators, function(i, separator) {
            var phaseID              = This.domIDs['phase'+(i+1)];
            var phaseText            = 'Fase '+(i+1)+' ';
            phasesCheckBoxesDomCode += separator+'<label for="'+phaseID+'">'+phaseText+'</label><input type="checkbox" id="'+phaseID+'" />\n';
        });

        /* Añadimos el código fuente DOM de la aplicación con sus identificadores. */
        jQuery('body').append(
            '\n\n<div id="'+this.domIDs.ct+'">\n'+
            '   <button id="'+this.domIDs.close+'">Cerrar</button><span id="'+this.domIDs.process+'"></span>\n'+
            '   <h1>Depurador de máquinas</h1>\n'+
            '   <div id="'+this.domIDs.ctSettings+'">\n'+
            '       <div id="'+this.domIDs.ctSelectors+'">\n'+
            selectorsDomCode+
            '       </div>\n'+
            '       <div id="'+this.domIDs.ctPhases+'">\n'+
            phasesCheckBoxesDomCode+
            '       </div>\n'+
            '   </div>\n'+
            '   <div id="'+this.domIDs.ctControls+'">\n'+
            '       <button id="'+this.domIDs.pause+'">Pausar</button><button id="'+this.domIDs.start+'">Iniciar</button>\n'+
            '   </div>\n'+
            '</div>\n'
        );
        /* Estilos para el DOM de la aplicación. */
        jQuery('body').append(
            '<style type="text/css">\n'+
            '#'+this.domIDs.ct+' {\n'+
            '    position      : fixed;\n'+
            '    top           : 10px;\n'+
            '    right         : 10px;\n'+ 
            '    border        : 1px solid #000;\n'+ 
            '    border-radius : 5px;\n'+ 
            '    padding       : 5px;\n'+
            '    background    : #f7faff;\n'+
            '    z-index       : 999999\n'+
            '}\n'+
            '#'+this.domIDs.ct+' *, -moz-focus-inner {\n'+
            '    font-family   : calibri;\n'+
            '    margin        : 0;\n'+
            '    padding       : 0;\n'+ 
            '}\n'+
            '#'+this.domIDs.ct+' button {\n'+
            '    cursor        : pointer;\n'+
            '    margin        : 0 5px;\n'+
            '    padding       : 3px 7px;\n'+ 
            '    border        : 2px solid skyblue;\n'+
            '    border-radius : 15px;\n'+ 
            '    background    : #fff;\n'+
            '    font-size     : 15px;\n'+
            '    font-weight   : bold;\n'+
            '    color         : skyblue;\n'+
            '    float         : right;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' button:hover {\n'+
            '    opacity       : 0.6;\n;'+
            '}\n'+
            '#'+this.domIDs.close+' {\n'+
            '    position      : absolute;\n'+
            '    margin        : 0!important;\n'+
            '    top           : 5px;\n'+
            '    right         : 5px;\n'+ 
            '    padding       : 2px 5px!important;\n'+
            '    font-size     : 11px!important;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' h1 {\n'+
            '    font-size     : 20px;\n'+
            '    margin        : 5px 60px 10px 5px;\n'+
            '    color         : skyblue;\n'+ 
            '    border-radius : 5px;\n'+
            '    cursor        : move\n'+
            '}\n'+
            '#'+this.domIDs.ctSettings+' {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.ctSelectors+' {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.ctSelectors+' select {\n'+
            '    text-align    : right;\n'+
            '    font-size     : 16px;\n'+
            '}\n'+
            '#'+this.domIDs.ctPhases+' {\n'+
            '    margin        : 10px 0;\n'+
            '}\n'+
            '#'+this.domIDs.ctPhases+' checkbox {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.ctControls+' {\n'+
            '    overflow: hidden;\n'+
            '}\n'+
            '#'+this.domIDs.ctControls+' button {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.process+' {\n'+
            '    position  : absolute;\n'+
            '    left      : 0;\n'+
            '    bottom    : 0;\n'+
            '    display   : none;\n'+
            '    font-size : 22px\n'+
            '}\n'+
            '</style>\n\n'
        );
        /* Deshabilitamos los selectores al inicio de la aplicación para evitar un seleccionamiento inesperado. */
        this.disableSelector(this.selectors.ns[0], true);

        var This = this;
        /* Evento onchange para los selectores */ 
        jQuery('#'+this.domIDs.ctSelectors).find('select').change(function(){

            var selectorNS = this.id.replace(/.*-/i, '');
            This.disableSelector(selectorNS, false)
                .doNextSelector(selectorNS, 'clearSelector');

            This.Controller.selectSelectorAction(selectorNS, this.value);

        });

        /* Evento onchange para los checbox */
        jQuery('#'+this.domIDs.ctPhases).find('input:checkbox').change(function(){

            var phaseNS = this.id.replace(/.*-/, '');
            This.Controller.checkedPhaseAction(phaseNS, this.checked);

        });

        /* Evento onclick para start */
        jQuery('#'+this.domIDs.start).click(function(){

            This.Controller.startDebuggingAction();

        });
    },
    
    /* Hace una acción ejecutando un método del objeto pasado por argumento y 
       pasandole el argumento argumentado.
       si es que aun hay otro selector inferior, ej. 'Tipo'->'Marca'->'Modelo' */
    doNextSelector: function(ns, methodName, arg) {
       var indexNS        = jQuery.inArray(ns, this.selectors.ns);
       var nextSelectorNS = this.selectors.ns[indexNS+1];
       if( nextSelectorNS ) {
           this[methodName](nextSelectorNS, arg);
       }
    },

    /* Llena las opciones de X selector con los datos argumentados en forma [{value:'',text:''},...] */
    fillSelector: function(selectorNS, data)
    {
        var $selector  = jQuery('#'+this.domIDs[selectorNS]);
        var selectorES = jQuery.inArray( selectorNS, this.selectors.ns );
            selectorES = this.selectors.es[selectorES];
        var options    = '<option value="" selected="selected">Seleccione '+selectorES+'</option>';

        this.clearSelector(selectorNS)
            .disableSelector(selectorNS, false);
        
        jQuery.each(data, function(i, data) {
            options += '<option value="'+data.value+'">'+data.text+' ('+data.number+')</option>';
        });       
        
        $selector.append(options);
    },

    /* Limpia el selector argumentado y los que le siguen. */
    clearSelector: function(selectorNS) 
    {
        this.Controller.debugConfig.selectors[selectorNS] = '';
        var $selector = jQuery('#'+this.domIDs[selectorNS]);
        
        $selector.html('');
        this.doNextSelector(selectorNS, 'clearSelector');

        return this;
    },
    
    /* Deshabilita/habilita el selector argumentado y los que le siguen. */
    disableSelector: function(selectorNS, disable) 
    {
        var $selector = jQuery('#'+this.domIDs[selectorNS]);
        
        $selector.attr('disabled', disable);
        this.doNextSelector(selectorNS, 'disableSelector', true);

        return this;
    },

    showProcessIndicator: function(show) {

        var $process = jQuery('#'+this.domIDs.process);
        $process.text('');
        if ( show ) {
            var text = ' ...';
            var i    = 0;
            $process.css('display', 'inline');

            this.processInterval = setInterval(function(){
                if( i+1 > text.length ) {
                    $process.text('');
                    i = 0;
                }
                $process.append(text.charAt(i++));

            }, 300);

        } else {
            $process.css('display', 'none');
            clearInterval(this.processInterval);
        }

    }
    
};

var imcDebug;
var scriptjQuery = document.createElement('script');
scriptjQuery.type= 'text/javascript';
scriptjQuery.src = 'https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js';
var scriptjQueryUI = document.createElement('script');
scriptjQueryUI.type= 'text/javascript';
scriptjQueryUI.src = 'https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js';

    /* Se inicializa el objeto de la aplicacion, se supone que el DOM ya esta
       listo al ejecutarlo en la pagina */ 
    if ( !window.jQuery ) {
        document.body.appendChild(scriptjQuery);

        scriptjQuery.onload = function() {
            createObjectImcDebug();
        }
    } else {
        createObjectImcDebug();
    }

    function createObjectImcDebug() {
        document.body.appendChild(scriptjQueryUI);
        scriptjQueryUI.onload = function() {
            imcDebug = new imcDebugController();
            $imcDebugView = jQuery('#'+imcDebug.view.domIDs.ct).draggable().draggable('option', 'handle', 'h1');
            $imcDebugView.bind('dragstart', function(){
                    jQuery(this).css('right', 'auto');
            });
        };    
    }
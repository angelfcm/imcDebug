javascript:
/* Clase constructora encargada de hacer las consultas a los archivos, 
   obtiendo datos y modificandolos usando el DOM. */
function imcDebugModel(controller, selectorsNS) 
{
    if ( !this.init ) {
        alert('Debe ser un objeto, se debe instanciar.');
    }
    this.controller = controller;
    this.view       = controller.view;
    this.logCaller  = controller.logCaller;
    this.logRequest = controller.logRequest;
    this.startedTime = new Date;
    this.init(selectorsNS);
}

imcDebugModel.prototype = 
{

    /* Metodo inicializador */
    init: function(selectorsNS) 
    {
        this.host = document.domain;
        /* Aqui se pondras los datos de las maquinas etiquedas por el programa */
        this.markedMachines = [];
        this.selectors = {
            ns         : selectorsNS,
            queryFiles : {},
            queryParams: {}
        };
        this.machinesData = {};
        this.checkedMachinesAmount = 0;
        /*this.reconnections_getSelectorData = 0;
        this.maxReconnections_getSelectorData = 5;
        this.lastSelectorSelected = '';*/
        
        /* Se definen los archivos para las consultas de tipos, marcas y modelos de maquinas. */
        var ns          = this.selectors.ns;
        var queryFiles  = this.selectors.queryFiles;
        var queryParams = this.selectors.queryParams;
 
        queryFiles [ns[0]] = 'tablatipos.php';
        queryParams[ns[0]] = 'tipo';
        queryFiles [ns[1]] = 'tablamarcas.php';
        queryParams[ns[1]] = 'marca';
        queryFiles [ns[2]] = 'tablamodelos.php';
        queryParams[ns[2]] = 'modelo';
        
        this.machinesSettings = {
            file: 'tablamaquinas.php',
            selectorsParams: this.selectors.queryParams
        };

        /* Creamos el iframe para las consultas de los datos con un identificador aleatorio para evitar conflictos con codigo recopiado. */
        var nameFrameid = 'imcDebugModel_queryFrame'+Math.random().toString().replace('\.','');
        jQuery('body').append('<iframe name="'+nameFrameid+'" style="display:none;"></iframe>');
        this.queryFrame = window[nameFrameid];
        this.$queryFrame= jQuery('iframe[name='+nameFrameid+']');

        /* Dominios aceptados para depurar, solo el nombre inicial ya que probablemente tengan diferentes extensiones (.com, .mx, .es, .ca, etc) */
        this.debugDomains = [
            'machinerytrader',
            'marketbook',
            'truckpaper',
            'auctiontime',
            'tractorhouse',
            /*'gmtrucksinc',*/
            document.domain
        ];
    },

    /* Devulve los datos para X selector (tipos, marcas y modelos) */
    getSelectorData: function(selectorNS, selectorsConfig, success, isReconnection, reconnectID) 
    {
        if (this.logCaller)console.log('CALLER::getSelectorData()');

        var urlGetData = '';
        var This       = this;
        var nsIndex    = jQuery.inArray(selectorNS, this.selectors.ns);
        var lastNsIndex= this.selectors.ns.length-1;
        var timeout    = 15000;
        var elapsedTime= 0;

        jQuery.each( selectorsConfig, function(ns, selectorValue){
            var param   = This.selectors.queryParams[ns];
            urlGetData += param+'='+selectorValue+'&';
        });
        var queryFile = this.selectors.queryFiles[selectorNS];

        /* Con esto hacemos reconexiones en caso de no cargar la solicitud, devuelve el ID del intervalo para detenerlo en caso de cargar la solicitud. Ver el metodo reconnect para ver las condiciones */
        reconnectID = reconnectID || this.reconnect(function(){
            netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
            This.queryFrame.stop();
        }, function(isReconnection, updatedReconnectID){
            reconnectID = updatedReconnectID;
            This.view.message3("Preparando");
            This.getSelectorData(selectorNS, selectorsConfig, success, isReconnection, reconnectID);
        }, isReconnection, {timeout: 15000, maxReconnections: 3, reconnectTime: 3000});

        this.$queryFrame.attr('src', 'about:blank');
        /* Abrimos el archivo con la consulta del selector y definimos la funcion al cargarse el contenido. */
        this.$queryFrame.attr('src', queryFile+'?'+urlGetData);

        if ( this.checkPause('Pausado por el usuario.') ) {
            clearTimeout(reconnectID);
            return;
        }
        var This = this;       
        this.$queryFrame.unbind('load');
        this.$queryFrame.load( function() {
            This.$queryFrame.unbind('load');
            /* Detenemos las reconexiones */
            clearTimeout(reconnectID);
            This.view.message3("Preparando");

            /* Filas contenedoras de los datos para tipos, marcas y modelos. */
            var $dataRows = jQuery('.listaDatos1', This.queryFrame.document).parent();
            var fixedData = [];
            
            /* Guardamos en fixedData el valor, texto y numero que existe de cada tipo, marca o modelo, ademas de la cantidad total y modeloid */
            var amount = jQuery.trim(jQuery('.listaTotales2:first', This.queryFrame.document).text());
            fixedData.push(amount);
            jQuery.each($dataRows, function(i, row){
                var $row     = jQuery(row);
                var value    = jQuery.trim( $row.find('.listaDatos1').text() );
                /* Capitalizamos el texto que se mostrará en pantalla. */
                var text     = value.replace(/^([a-z])|\s+([a-z])/g, function ($c) {
                    return $c.toUpperCase();
                });
                var amount   = jQuery.trim( $row.find('.listaDatos2').text() );  
 
                if ( value ) {
                    var data = {value: value, text: text, amount: amount};
                    if ( nsIndex == lastNsIndex ) {
                        data.modeloid = $row[0].getAttribute('onclick').match(/modeloid=\d+/)[0].replace('modeloid=', '');
                    }
                    fixedData.push(data);
                }
            });
            
            /* Llamamos la funcion argumentada y pasamos el resultado obtenido. */
            success(fixedData);
        });
    },

    getPageMachines: function(trackingConfig, modeloid, success, isReconnection, reconnectID)
    {
        if (this.logCaller)console.log('CALLER::getPageMachines()');
        var urlGetData = '';
        var This = this;
        jQuery.each(trackingConfig.getDataConfig, function(ns, selectorValue){
            var param = This.machinesSettings.selectorsParams[ns];
            urlGetData += param+'='+selectorValue+'&';
        });
        urlGetData += 'modeloid='+modeloid+'&actual='+(trackingConfig.index.page+1);
        var queryFile = this.machinesSettings.file;
        /* Con esto hacemos reconexiones en caso de no cargar la solicitud, devuelve el ID del intervalo para detenerlo en caso de cargar la solicitud. Ver el metodo reconnect para ver las condiciones */

        reconnectID = reconnectID || this.reconnect(function(){
            netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
            This.queryFrame.stop();
        }, function(isReconnection, updatedReconnectID){
            reconnectID = updatedReconnectID;
            This.getPageMachines(trackingConfig, modeloid, success, isReconnection, reconnectID);
            This.view.message3("DEPURANDO");
        }, isReconnection, {timeout: 15000, maxReconnections: 3, reconnectTime: 3000});

        this.$queryFrame.attr('src', 'about:blank');
        /* Abrimos el archivo con la consulta del selector y definimos la funcion al cargarse el contenido. */
        this.$queryFrame.attr('src', queryFile+'?'+urlGetData);
        this.$queryFrame.unbind('load');

        this.$queryFrame.load( function() {

            /* Es importante quitar el evento load ya que al agregarlo con jQuery, este no se pierde aunque se recargue */
            This.$queryFrame.unbind('load');
            /* Detenemos las reconexiones */
            clearTimeout(reconnectID);
            This.view.message3("DEPURANDO");
            /* Filas contenedoras de los datos para tipos, marcas y modelos. */
            var $dataRows1 = jQuery('tr[id^="fila"]:even', This.queryFrame.document);
            var $dataRows2 = jQuery('tr[id^="fila"]:odd', This.queryFrame.document);
            var fixedData  = [];
            
            /* Primera fila de la maquina que contiene el ID */
            jQuery.each($dataRows1, function(i, row){/* AUN FALTA AQUI*/
                var $row1     = jQuery(row); 
                var indexRow  = $dataRows1.index($row1);
                var $row2     = $dataRows2.eq(indexRow);
                var id        = jQuery.trim($row1.find('td:eq(1)')[0].getAttribute('onclick').match(/ID=\d+\&/)[0].replace(/ID=|\&/g, ''));
                var alreadyMarked  = $row1.css('background-color') == 'rgb(234, 208, 208)';
                var phases    = {};
                /* Registra 'tiene proyectos de compra' (es una fase) */
                var buyProjects = $row2.is(':contains("Tiene proyectos de compra")');

                /* Registra las fases activas */
                for( var i = 1; i <= 3; i++ ) {
                    phases['phase'+i] = $row2.is(':contains("Fase '+i+'")');
                }
                phases['buyProjects'] = buyProjects;

                try {
                /* Segunda fila de la maquina que contiene el enlace original */
                var link  = $row2.find('td:eq(1) a:contains("(Ver enlace original)")')[0].href;
                } catch(err) {
                    This.controller.pause = true;
                    This.checkPause('<span class="error">Debes iniciar sesión para continuar.</span>');
                    return false;
                }

                fixedData.push({ id: id, link: link, phases: phases, alreadyMarked: alreadyMarked });
            });
            if( This.checkPause('Pausado por el usuario') ){ return; }
            /* Llamamos la funcion argumentada y pasamos el resultado obtenido. */
            success(fixedData);
        });
    },

    reconnect: function(onBeforeReconnect, onReconnect, isReconnection, config) 
    {
        if ( isReconnection ) {
            return;
        } 
        var reconnections    = 0;
        var This = this;
        var fn = function(){
            This.$queryFrame.unbind('load');
            if ( typeof onBeforeReconnect == 'function' ) {
                onBeforeReconnect();
            }
            if ( ++reconnections <= config.maxReconnections ) {
                This.view.message3('<span class="error">Tiempo de espera excedido, reintento '+reconnections+' de '+config.maxReconnections+'...</span>');
                setTimeout(function(){
                    onReconnect(true, setTimeout(fn, config.timeout)); 
                }, config.reconnectTime);
            } else {
                This.controller.pause = true;
                This.checkPause('<span class="error">Error de conexión.</span>');
            }
        };
        return setTimeout(fn, config.timeout);
    },

    debuggingProcess: function(trackingConfig) 
    {
        /* Guarda en machinesData, la ruta que tendrán las máquinas de cada modelo en el siguiente orden 
            { 
                amount: n,
                tipo1: { 
                    amount: n,
                    marca1: { 
                        amount: n,
                        modelo1: {amount: n, pages: [], modeloid: id} 
                    } 
                },
                tipo2: {...}, 
                ...
            } 
           Los datos que se descargan usando getSelectorData que los devuelve asi [{value:'', text:'', amount: n}, ...] y se arreglan como arriba se muestra..
        */
        var This              = this;
        var selectors         = this.selectors.ns;
        var lastSelectorIndex = selectors.length-1;
        var tracking          = this.machinesData;
        var selectorKeys      = {};

        this.view.message3('DEPURANDO');
        if (this.logCaller)console.log('CALLER::debuggingProcess()');
        /* En caso de pedir pausa se detiene el proceso, pero no se termina. */
        if(this.checkPause('Pausado por el usuario')) return;
        /* Funcion encargada de marcar el rastreo donde se buscaran y depuraran las maquinas, dependiendo de que indice de tipo, marca y modelo tenga trackingConfig.indexValue.:seector:*/
        var setTracking = function(iNS, prevValue, success) {

            if (This.logCaller)console.log('CALLER::debuggingProcess()>setTracking()');
            /* En caso de pedir pausa se detiene el proceso, pero no se termina. */
            if(This.checkPause('Pausado por el usuario')) return;
            if ( iNS > lastSelectorIndex ) {
                success();
                return;
            }
            var ns            = selectors[iNS];
            var getDataConfig = trackingConfig.getDataConfig;
            var keysValues = Object.keys(tracking);
            selectorKeys[ns] = keysValues;
            var value      = keysValues[ trackingConfig.index[ns] + 1 ];

            if ( !value ) {
                if (This.logRequest)console.log('REQUEST::'+This.pathMessage().replace(/(<b>)|(<\/b>)/g,''));
                This.view.message1(This.pathMessage());
                This.getSelectorData(ns, getDataConfig, function(data) {
                if (This.logCaller)console.log('CALLER::debuggingProcess()>setTracking()>getSelectorData()>success');
                    jQuery.each(This.fixData(data), function(k, v) {
                        tracking[k] = v;
                    });
                    setTracking(iNS, getDataConfig, success);
                });
                return;
            }
            getDataConfig[ns] = value;
            tracking          = tracking[value];
            setTracking(++iNS, value, success);
        };

        /* Marcamos el puntero/rastreo donde se buscaran las maquinas */
        setTracking(0, null, function(){
            if (This.logCaller)console.log('CALLER::debuggingProcess()>setTracking()>success');
            /* Buscamos las maquinas para X pagina del rastreo */
            This.getPageMachines(trackingConfig, tracking.modeloid, function(pageMachines){
            if (This.logCaller)console.log('CALLER::debuggingProcess()>setTracking()>success>getPageMachines()>success');
                if ( !tracking.pages ) {
                    tracking.pages = [];
                }
                tracking.pages[trackingConfig.index.page]=pageMachines;

                /* Ahora si comenzamos a depurar por paginas. */
                This.debugPageMachines(tracking, trackingConfig, function(){
                    if (This.logCaller)console.log('CALLER::debuggingProcess()>setTracking()>success>getPageMachines()>success>debugPageMachines()>success');
                    /*Movemos a la siguiente pagina y si no hay entonces al siguiente modelo y si no al siguiente marca y si no al tipo y si no terminamos. */
                    /* Siempre se le sumara 1 al indice de los selectores ya que en primer lugar siempre esta la propiedad "amount" por lo que se salta */
                    /* Se define la cantidad de paginas que hay en el modelo dependiendo el numero de maquinas, son 20 maquinas por pagina, se suma 1 si hay sobrante. */
                    var numberPages = parseInt(tracking.amount/20) + (tracking.amount%20 ? 1 : 0);
                    var cond1 = trackingConfig.index.page < numberPages-1;
                    var cond2 = trackingConfig.index.model+1 < selectorKeys.model.length-1;
                    var cond3 = trackingConfig.index.mark+1 < selectorKeys.mark.length-1;
                    var cond4 = trackingConfig.index.type+1 < selectorKeys.type.length-1;
                    if( cond1 || cond2 || cond3 || cond4 ) {
                        trackingConfig.index.machine = 0;
                        /* Movemos a la siguiente pagina */
                        if ( cond1 ) {
                            trackingConfig.index.page++;
                        } else
                        /* Movemos al siguiente modelo, si hay. */
                        if ( cond2 ) {
                            trackingConfig.index.model++;
                            trackingConfig.index.page = 0;
                        } else
                        /* Movemos a la siguiente marca, si hay. */
                        if ( cond3 ) {
                            trackingConfig.index.mark++;
                            trackingConfig.index.page  = 0;
                            trackingConfig.index.model = 0;
                        } else
                        /* Movemos al siguiente tipo, si hay. */
                        if ( cond4 ) {
                            trackingConfig.index.type++;
                            trackingConfig.index.page = 0;
                            trackingConfig.index.model = 0;
                            trackingConfig.index.mark = 0;
                        }
                        if ( This.checkPause('Pausado por el usuario') ) return;
                        /* Se depura en la siguiente pagina del siguiente modelo, marca y tipo si es que se terminaron sus maquinas respectivas. */
                        This.debuggingProcess(trackingConfig);
                    } else {
                        if( This.queryWindow ) {
                            This.queryWindow.close();
                        }
                        This.controller.finishAction();
                    }
                });
            });
        });
    },

    debugPageMachines: function(tracking, trackingConfig, success)
    {
        if (this.logCaller)console.log('CALLER::debugPageMachines()');

        var getDataConfig = trackingConfig.getDataConfig;
        var numberPage = trackingConfig.index.page+1;

        if (this.logRequest)console.log('REQUEST::'+this.pathMessage(true).replace(/(<b>)|(<\/b>)/g,''));

        this.view.message1(this.pathMessage());
        
        var This = this;
        var page = tracking.pages[ trackingConfig.index.page ];
        /* Variable para detener las funciones que traten de ejecutarse en una reconeccion anterior */
        var stopPrev = false;

        var debugMachine = function(isReconnection, reconnectID) {
            This.view.message3('DEPURANDO');

            if (This.logCaller)console.log('CALLER::debugPageMachines()>debugMachine()');
            var machine = page[ trackingConfig.index.machine ];

            if (This.logRequest)console.log('REQUEST::ID='+machine.id+', Request='+machine.link+', Response=[WAITING]');

            This.view.message1(This.pathMessage());
            var checkPhases   = This.controller.debugConfig.checkPhases, hasPhase = false;

            for( var i = 1; i <= 3; i++ ) {
                if ( !checkPhases['phase'+i] && machine.phases['phase'+i] ) {
                    hasPhase = true;
                    break;
                }
            }
            if ( !checkPhases.buyProjects && machine.phases.buyProjects ) {
                hasPhase = true;
            }

            /* Debe respetar el dominio configurado para la depuracion */
            var isCorrectDomain = false;
            jQuery.each(This.debugDomains, function(i, d){
                if ( machine.link.indexOf(d) != -1 ) {
                    isCorrectDomain = true;
                    return false;
                }
            });
            /* Saltamos a la siguiente maquina si esta ya esta marcada o excepcion de fase y evitar solicitudes en vano */
            if ( machine.alreadyMarked || hasPhase || !isCorrectDomain ) {
                var ignoredResponse = '[IGNORED]';
                if ( machine.alreadyMarked ) {
                    ignoredResponse += '[ALREADY MARKED]';
                    /*console.log('Excepcion de marcada.\n');*/
                }
                if ( hasPhase ) {
                    ignoredResponse += '[HAS PHASE]';
                    /*console.log('Excepcion de fase.\n');*/
                }
                if ( !isCorrectDomain ) {
                    ignoredResponse += '[UNKNOWN DOMAIN]';
                }
                if (This.logRequest)console.log('REQUEST::ID='+machine.id+', Request='+machine.link+', Response='+ignoredResponse);
                /*console.log('\n-------------------------------');*/
                next();
                return;
            }
            /* Pedimos permiso para acceder a otro dominio. */
            try {
                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
            } catch(err) {
                This.view.message3('Acepta el privilegio para continuar el proceso.\nO hubo un error, activa \'signed.applets.codebase_principal_support\' en \'about:config\'');
                return;
            }
            /* Funcion reemplazante del evento onload para la carga de un crossdomain ya que un onload comun no funcionaria */
            var onLoadCrossDomain = function(windowObject, success, querySpeed){
                
                if (This.logCaller)console.log('CALLER::debugPageMachines()>debugMachine()>onLoadCrossDomain()');
                var previousLocation = windowObject.location.href;
                var ONE = false;
                var isCaptchaStop = false;

                (function check() {
                    if ( stopPrev ) {
                        return;
                    }
                    if ( !ONE ) { 
                        ONE=true;
                        if (This.logCaller)console.log('CALLER::debugPageMachines()>debugMachine()>onLoadCrossDomain()>check()');
                    }
                    if ( This.checkPause('Pausado por el usuario') ) {
                        clearTimeout(reconnectID);
                        return;
                    }
                    if ( windowObject.closed ) {
                        clearTimeout(reconnectID);
                        This.controller.pause = true;
                        This.checkPause('<span class="error">La ventana del proceso fue cerrada por el usuario, se ha pausado.</span>');
                        return;
                    }
                    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
                    /* Cuando el contenido esta completo en machinery y tractorhouse, en veces se carga un contenido inesperado que redirecciona al contenido correcto, por lo que se espera hasta que sea el correcto que contiene un formulario con el id mencionado abajo. 
                        Pero si la pagina se redirecciona a la pagina de inicio es valido, en machinery, tractorhouse y marketbook, terminan con default.aspx
                    */
                    try {
                        var isCorrectContent = jQuery('#aspnetForm', windowObject.document).length || /(default\.aspx)|(notfound\.aspx)/i.test(windowObject.location.href) || windowObject.document.domain == This.host /*|| windowObject.document.domain == 'gmtrucksinc.com'*/;
                        var needCaptcha = windowObject.location.href.indexOf('blockedUser') != -1;
                    }catch(err){}

                    if ( needCaptcha ) {
                        clearTimeout(reconnectID);
                        if ( !isCaptchaStop ) {
                            var jsResizeWindow = 'javascript:netscape.security.PrivilegeManager.enablePrivilege(\'UniversalXPConnect\');var qWinDeb = imcDebug.model.queryWindow; qWinDeb.resizeTo(400, 400); qWinDeb.moveTo((screen.availWidth/2)-200, (screen.availHeight/4)-200); qWinDeb.focus();';
                            This.view.message3('<span class="error">Se solicita captcha, confirmalo. <a href="'+jsResizeWindow+'">Ampliar ventana</a></span>');
                        }
                        isCaptchaStop = true;
                        setTimeout(check, querySpeed);
                        return;
                    }
                    /* Si el contenido esta completo y la direccion anterior es diferente a la nueva y el contenido es el correcto, entonces se ha cargado la pagina */
                    if ( windowObject.document.readyState == 'complete' && previousLocation != windowObject.location.href && isCorrectContent ) {
                        /* Con esto evitamos confusion con el proximo enlace de maquina, en caso de redireccionar al mismo enlace ya sea por que no se encontro la maquina o otra razon. */
                        windowObject.location.hash = Math.random();
                        success();
                    } else {
                        setTimeout(check, querySpeed);
                    }
                })();
            };
            if( This.queryWindow && This.queryWindow.closed === false ) {
                This.queryWindow.close();
            }
            try{ 
                This.queryWindow  = window.open('', '', 'width=1, height=1, left=0, top=0, directories=0, menubar=0, toolbar=0, scrollbars=1, location=1, satus=0, dependend=1');
                This.queryWindow.blur();
            } catch(err){
                This.controller.pause = true;
                This.checkPause('<span class="error">Acepta al navegador que se permitan ventanas emergentes y vuelve a intentar.</span>');
                return;
            }
            This.queryWindow.location = machine.link;
            /* Con esto hacemos reconexiones en caso de no cargar la solicitud, devuelve el ID del intervalo para detenerlo en caso de cargar la solicitud. Ver el metodo reconnect para ver las condiciones */
            reconnectID = reconnectID || This.reconnect(function(){
                stopPrev = true;
            }, function(isReconnection, updatedReconnectID){
                reconnectID = updatedReconnectID;
                stopPrev = false;
                debugMachine(isReconnection, reconnectID);
            }, isReconnection, {timeout: 15000, maxReconnections: 5, reconnectTime: 5000});

            /* Llamamos a la funcion especial qe detecta la carga de la pagina siendo crossDomain. */
            onLoadCrossDomain(This.queryWindow, function(isReconnection, reconnectID2){
                if ( stopPrev ) {
                    return;
                }
                /* Detenemos la reconeccion */
                clearTimeout(reconnectID);

                if ( This.checkPause('Pausado por el usuario.') ) {
                    clearTimeout(reconnectID2);
                    /*ajax.abort();*/
                    return;
                }

                if (This.logCaller)console.log('CALLER::debugPageMachines()>debugMachine()>onLoadCrossDomain()>success');
                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
                /* El metodo de validacion para calificar como vendida o no, es a continuacion */
                var needMarkAsSold = false;
                if ( new RegExp("(default\.aspx)|(notfound=)|(notfound.aspx)|("+This.host+")", "i").test(This.queryWindow.location.href) ) {
                    needMarkAsSold = true;
                }
                /*gmtrucksinc.com*//*
                if ( jQuery(This.queryWindow.document.body).is(':contains("Could not successfully run query")') ) {
                    needMarkAsSold = true;
                }*/
                if ( needMarkAsSold ) {
                    This.markedMachines.push({ 
                        id   : machine.id,
                        path : This.pathMessage(true),
                        date : (new Date).toLocaleString(),
                        link : machine.link
                    });

                    var callee = arguments.callee;
                    /* Reconexiones para cuando se intenta enviar la solitud de etiquetado */
                    reconnectID2 = reconnectID2 || This.reconnect(
                        function(){
                            /* Cambio a queryFrame para la solucion temporal */
                            netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
                            This.queryFrame.stop();
                            /* ajax200.abort() */
                        }, 
                        function(isReconnection, updatedReconnectID){
                            reconnectID2 = updatedReconnectID;
                            This.view.message3("DEPURANDO");
                            callee(isReconnection, reconnectID2);
                        }, 
                        isReconnection, {timeout: 20000, maxReconnections: 3, reconnectTime: 3000}
                    );

                    /*Abre el enlace y evita redirecciones*/
                    function ajax200(file, success) {
                        var ajax = new XMLHttpRequest(), ONE = false;
                        ajax.open('get',file);
                        var t = setInterval(function(){
                            if ( This.checkPause('Pausado por el usuario.') ) {
                                clearTimeout(reconnectID2);
                                clearInterval(t);
                                ajax.abort();
                            }
                        }, 500);
                        ajax.onreadystatechange = function(){                                               
                            if(ajax.status==200 && !ONE){
                                ONE = true;
                                ajax.abort();
                                clearInterval(t);
                                success();
                                return;
                            }
                        };
                        ajax.send();
                        /* Por si es necesario abortar desde fuera */
                        return ajax;
                    }
                    
                    /* Se solicita el etiquetado */
                    /* Solucion de etiqueado normal, comentado para utilizar la forma por frame */
                    /*
                    ajax200('cambia.php?op=maquinavendida&noHeader=&maquinaid='+machine.id+'&est=Disponible', 
                        function() {
                            clearTimeout(reconnectID2);
                            netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
                            if (This.logRequest)console.log('REQUEST::ID='+machine.id+', Request='+machine.link+', Response=[MARKED_AS_SOLD]['+This.queryWindow.location.href+']');
                            next();
                        }
                    );*/

                    /* Solución temporal para registrar las etiquetadas como modificadas */
                    This.$queryFrame.attr('src', 'about:blank');
                    This.$queryFrame.attr('src', 'consolamaquinas.php?maquinaID='+machine.id);     
                    This.$queryFrame.unbind('load');
                    This.$queryFrame.load(function() {
                        This.queryFrame.addEventListener('unload', function(){
                            clearTimeout(reconnectID2);
                            netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
                            if (This.logRequest)console.log('REQUEST::ID='+machine.id+', Request='+machine.link+', Response=[MARKED_AS_SOLD]['+This.queryWindow.location.href+']');
                            This.$queryFrame.unbind('load');
                            next();
                        }, false);
                        This.queryFrame.document.formulario.est.value = 'Vendida';
                        This.queryFrame.document.formulario.submit();
                    });
                    /* Aqui termina la solucion temporal */

                } else {
                    if (This.logRequest)console.log('REQUEST::ID='+machine.id+', Request='+machine.link+', Response=[NOT_NEED_MARK]['+This.queryWindow.location.href+']');
                    next();
                }
                return;
            }, 10);
        };
        function next() {
            This.checkedMachinesAmount++;
            This.view.message2('<b>'+(This.markedMachines.length)+' Etiquetadas </b> - <b>'+This.checkedMachinesAmount+' Analizadas</b>');

            if (This.logCaller)console.log('CALLER::debugPageMachines()>debugMachine()>onLoadCrossDomain()>success>next()');
            netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
            var pageMachinesLength = page.length;
            if ( trackingConfig.index.machine < pageMachinesLength-1 ) {
                trackingConfig.index.machine++;
                 /* Debe de haber un tiempo entre consulta minimo de 2000ms ya que rechazan solicitudes continuas */
                try{This.queryWindow.close();}catch(err){}
                setTimeout(debugMachine, 100);
            } else {
                try{This.queryWindow.close();}catch(err){}
                success();
            }
        }
        debugMachine();
    },

    fixData: function(notFixedData) 
    {
        var totalAmount = notFixedData.splice(0,1)[0];
        totalAmount = parseInt( totalAmount.replace(/,/g,'') );

        var fixedData = {amount: totalAmount};
        jQuery.each(notFixedData, function(i, data){

            var amount = parseInt( data.amount.replace(/,/g,'') );
            fixedData[data.value] = {amount: amount};

            if ( data.modeloid ) {
                fixedData[data.value].modeloid = data.modeloid;
                fixedData[data.value].pages    = [];
            }
        });
        return fixedData;
    },

    checkPause: function(message, dontCloseWindow)
    {
        netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
        /* En caso de pedir pausa se detiene el proceso, pero no se termina. */
        if ( this.controller.pause ) {
            this.$queryFrame.stop();
            this.$queryFrame.unbind('load');
            this.controller.paused = true;
            this.view.showProcessIndicator(false);
            this.view.showButtons('resume', 'finish');
            this.view.disableCheckboxes(false);
            if(this.queryWindow && !dontCloseWindow) {
                this.queryWindow.close();
            }
            this.view.message3(message);
            return true;
        }
        return false;
    },

    pathMessage: function(justpathdata1)
    {
        var trackC  = this.controller.trackingConfig;
        var dataC   = trackC.getDataConfig;
        var pathdata    = {
            type    : dataC.type,
            mark    : dataC.mark || '',
            model   : dataC.model || ''
        };
        var pathText = '';

        jQuery.each(pathdata, function(k, v) {
            if ( k != 'type' ) {
                pathText += ' > ';
            }
            if( v ) {
                pathText += '<b>'+v+'</b>';
            } else { 
                pathText += 'Cargando...';
                return false;
            }
        });

        if ( justpathdata1 ) {
            return pathText;
        }

        var pathdata2    = {
            page    : '',
            machine : ''
        };
        try{
            var pathP    = this.machinesData[pathdata.type][pathdata.mark][pathdata.model];
            var ipage    = trackC.index.page;
            pathdata2.page = 'Pag '+(ipage+1)+' de '+( parseInt(pathP.amount/20) + (pathP.amount%20 ? 1 : 0) );
            pathdata2.machine = 'Maq '+(trackC.index.machine+1)+' de '+pathP.pages[ipage].length;
        } catch(err){}

        if ( !pathdata2.page ) {
            return pathText;
        }

        jQuery.each(pathdata2, function(k, v) {
            if( v ) {
                pathText += ' > <b>'+v+'</b>';
            } else { 
                pathText += ' > Cargando...';
                return false;
            }
        });

        return pathText;
    }

};

/* Clase constructora encarga de controlar el modelo y la vista, 
   quien decidira que accion tomar afectando la base de datos y la vista de la aplicación. */
function imcDebugController(logRequest, logCaller) 
{
    if ( !this.init ) {
        alert('Debe ser un objeto, se debe instanciar.');
    }
    this.logRequest = logRequest;
    this.logCaller  = logCaller;
    this.init();
}

imcDebugController.prototype =  
{

    /* Inicializador */
    init: function()
    {

        this.selectors = {
        /* Namespaces para los tipos, marcas y modelos */
            ns   : ['type', 'mark', 'model'],
        /* Texto de salida para leer los nombres de selectores */
            es   : ['tipo', 'marca', 'modelo']
        };

        this.resetConfig();

        this.pause    = false;
        this.paused   = false;
        this.started  = false;
        this.finish   = false;
        this.finished = false;

        /* Se crean los objetos para el modelo y la vista y se ejecuta la accion por default. */
        this.view        = new imcDebugView(this, this.selectors.ns, this.selectors.es);
        this.model       = new imcDebugModel(this, this.selectors.ns);
        this.indexAction();
    },

    resetConfig: function()
    {
        if( ! this.debugConfig ) {
            this.debugConfig = {
                selectors : {'type': '', 'mark': '', 'model': ''},
                /* Para guardar la cantidad de maquinas de cada seleccion y no perderlas */
                selectorsAmount: {'type': null, 'mark': null, 'model': null},
                /* Cantidad total de maquinas en el sistema */
                machinesTotalAmount: null,
                /* Para para del GET del selector modelo, el modeloid */
                modeloid: null,
                checkPhases: { phase1: false, phase2: false, phase3: false, buyProjects: false }
            };
        } else {
            this.debugConfig.selectors = {'type': '', 'mark': '', 'model': ''};
            this.debugConfig.selectorsAmount = {'type': null, 'mark': null, 'model': null};
            this.debugConfig.modeloid = null;
        }

        this.trackingConfig = {
            index         : {
                type   : 0,
                mark   : 0,
                model  : 0,
                page   : 0,
                machine: 0
            },
            getDataConfig : {}
        };
    },
    
    /* Acción por default */
    indexAction: function()
    {
        this.view.message1('');
        this.view.message2('');
        this.view.message3('Preparando...');
        /* Accionamos el selectAction por default al selector de tipos de máquinas. */ 
        this.fillSelectorAction(this.selectors.ns[0]);
    },

    selectSelectorAction: function(selectObject)
    {  
        if ( !this.finished ) {
            this.view.message1('');
            this.view.message2('');
        } else {            
            this.finished = false;
            this.finish   = false;
        }

        var selectorNS = selectObject.id.replace(/.*-/i, '');
        this.view.disableSelector(selectorNS, false)
            .doNextSelector(selectorNS, 'clearSelector');

        var amount   = jQuery(selectObject).find('option:selected').text().replace(/,/g,'').match(/\(\d*\)/)[0].replace(/\(|\)/g,'').replace(/,/g, '');
            amount   = parseInt(amount);
        var modeloid = jQuery(selectObject).find('option:selected').attr('modeloid');
        var value    = selectObject.value;

        /* Guardamos la configuracion del selector seleccionado */
        this.debugConfig.selectors[selectorNS]       = value;
        this.debugConfig.selectorsAmount[selectorNS] = amount;
        this.debugConfig.modeloid                    = modeloid;
        
        /* guardamos los valores de los selectores en los datos finales para filtrar la depuracion de maquinas. */
        this.setMachinesDataBeforeDebugging(selectorNS, value);

        /* Si no hay valor seleccionado evitamos un error tratando de llenar el siguiente selector. */
        if ( ! value ) {
            return;
        }

        /* SI hay un selector despues del accionado entonces se llena el siguiente. */
        var selectorIndex = jQuery.inArray(selectorNS, this.selectors.ns);
        var nextSelector  = this.selectors.ns[selectorIndex+1];
        if ( nextSelector ) {
            this.view.showProcessIndicator(true);
            this.view.message3('Cargando '+this.selectors.es[selectorIndex+1]+'s');
            this.fillSelectorAction(nextSelector);
        }

    },

    setMachinesDataBeforeDebugging: function(selectorNS, value) {
        /* Guarda los datos de las maquinas que se buscaran, asi se busca donde se selecciona y no tener que buscar en todos los tipos, marcas y modelos 
           a la hora de comenzar la depuracion.*/
        var This          = this;
        var totalAmount   = this.debugConfig.machinesTotalAmount;
        var trackingData  = this.model.machinesData = {};
        var firstSelector = this.selectors.ns[0];
        var lastSelector  = this.selectors.ns.slice(-1);

        /* Si se selecciona el selector type y no tiene value entonces no se pone el totalAmount. Para los demas tenga o no tenga value se asigna. */
        if ( selectorNS != firstSelector || value && selectorNS == firstSelector ) {
            this.model.machinesData.amount = totalAmount;
        }

        jQuery.each(this.debugConfig.selectors, function(ns, selectorValue){
            /* Objeto donde ira el contenido del selector seleccionado. */
            var contentObject = {};

            if ( ! selectorValue ) {
                return false;
            }

            /* Definimos la propiedad de longitud de maquinas para X selector */
            contentObject.amount = This.debugConfig.selectorsAmount[ns];
            if ( ns == lastSelector ) {
                contentObject.modeloid = This.debugConfig.modeloid;
            }
            /* Definimos el objeto del selector, si es el ultimo, es el de los modelos por lo que usaremos una matriz de datos []*/
            trackingData[selectorValue] = contentObject;
            /* Se sube un nivel para seguir el rastreo hasta el ultimo selector seleccionado. */
            trackingData = trackingData[selectorValue];
        });
    },

    fillSelectorAction: function(selectorNS) {
        var This             = this;
        var currentSelection = this.debugConfig.selectors;

        this.view.showProcessIndicator(true);
        this.view.showButtons();
        this.view.disableSelector('type', true);

        this.model.getSelectorData(selectorNS, currentSelection, function(resultData) {

            if (This.logCaller)
                console.log('CALLER::fillSelectorAction()>getSelectorData()>success');

            This.view.message3('Esperando inicio');
            This.view.showButtons('start', 'close');

            jQuery.each(This.selectors.ns, function(i, ns){
                This.view.disableSelector(ns, false);
            });

            if ( selectorNS == 'type' ) {
                This.debugConfig.machinesTotalAmount = resultData[0];
            }
            /* Llenamos el selector con el mismo orden del resultData, es decir [{value: '', text: '', amount: n }, {}, ...].  */
            This.view.fillSelector(selectorNS, resultData);
            /* Quitamos el efecto de operación en proceso. */
            This.view.showProcessIndicator(false);
        });  
    },

    checkedPhaseAction: function(phaseNS, checked) 
    {
        this.debugConfig.checkPhases[phaseNS] = checked;
    },

    startDebuggingAction: function() 
    {
        this.view.showButtons('pause');
        this.view.disableCheckboxes(true);

        var This = this;
        jQuery.each(this.debugConfig.selectors, function(ns, selectorValue) {
            This.trackingConfig.index[ns]    = 0;
            This.trackingConfig.getDataConfig[ns] = selectorValue;
        });

        var isEmpty = !Object.keys(this.model.machinesData).length;
        if ( isEmpty ) {
            this.model.getSelectorData(this.selectors.ns[0], '', function(notFixedData){
                This.model.machinesData = This.model.fixData(notFixedData);
                This.model.debuggingProcess(This.trackingConfig);
            });
        } else {
            this.model.debuggingProcess(this.trackingConfig);
        }
    },

    startAction: function()
    {
        this.model.startedTime = new Date;
        this.model.finishedTime = undefined;
        this.model.checkedMachinesAmount = 0;
        this.model.markedMachines = [];
        this.view.showProcessIndicator(true);
        this.view.message1('');
        this.view.message2('');
        this.view.message3('Iniciando...');
        this.finished = false;
        this.finish   = false;
        this.started  = true;
        this.view.disableSelector('type', true);
        this.view.showButtons();
        this.startDebuggingAction();
    },

    pauseAction: function()
    {
        this.view.showProcessIndicator(true);
        this.view.message3('Pausando...');
        this.pause = true;
        this.view.showButtons();
    },

    resumeAction: function()
    {
        this.view.showProcessIndicator(true);
        this.view.message3('Reanudando...');
        this.pause  = false;
        this.paused = false;
        this.view.disableSelector('type', true);
        this.model.debuggingProcess(this.trackingConfig);
        this.view.showButtons('pause');
        this.view.disableCheckboxes(true);
    },

    finishAction: function()
    {

        if (this.logCaller)
            console.log('CALLER::finishAction()');
        
        this.view.showProcessIndicator(true);
        this.view.message3('Terminando...');
        this.pause = false;
        this.paused = false;
        this.finish = true;
        this.view.disableSelector('type', false);
        this.view.disableCheckboxes(false);
        this.view.showButtons('');
        this.model.finishedTime = new Date;
        var regexpHour = /(\d\d:?){3} \w\.\w\./i;
        var hStarted   = this.model.startedTime.toLocaleString().match(regexpHour)[0];
        var hFinished  = this.model.finishedTime.toLocaleString().match(regexpHour)[0];
        if (this.model.markedMachines.length == 0) {
            this.finished = true;
            this.view.showProcessIndicator(false);
            this.view.showButtons('start', 'close'); 
            this.view.message3('TERMINADO! - No se etiquetaron máquinas <br /> Comenzado: '+hStarted+', Terminado: '+hFinished);
        } else {
            this.success(hStarted, hFinished);
            this.view.message3('TERMINADO! <br /> Comenzado: '+hStarted+', Terminado: '+hFinished);
        }
        this.resetConfig();
        try{
            this.selectSelectorAction(jQuery('#'+this.view.domIDs.type).val(0)[0]);
        } catch(err) {}
    },

    success: function(hStarted, hFinished){

        if (this.logCaller)
            console.log('CALLER::finishAction()>success()');   

        var This = this;
        var basePath = "";
        with (this.debugConfig.selectors) {
            basePath = ( type ? type : "Todas las máquinas" ) + " - ";
            basePath += ( mark ? mark : "todas las marcas" ) + " - ";
            basePath += ( model ? model : "todos los modelos" );
        }
        this.view.showProcessIndicator(true);
        this.resultWindow = window.open('','','width='+(screen.availWidth/2)+', height='+(screen.availHeight/2)+', top=0, left=0, directories=1, menubar=1, toolbar=1, scrollbars=1, location=1, satus=1, dependend=1');
        this.resultWindow.document.title = basePath + " - " + this.model.markedMachines.length + 'Et-' + this.model.checkedMachinesAmount + "An";
        var regexpHour = /(\d\d:?){3} \w\.\w\./i;
        var $body = jQuery(this.resultWindow.document.body);
        var partofcontent = 
        '\n<style>\n'+
        '   * {\n'+
        '       margin      : 0;\n'+
        '       padding     : 0;\n'+
        '       font-family : calibri;\n'+
        '   }\n'+
        '   h1 {\n'+
        '       text-align  : center;\n'+
        '       margin      : 15px;\n'+
        '       text-shadow : 0 0 3px #666;\n'+
        '   }\n'+
        '   h3 {\n'+
        '       padding-left: 10%;\n'+
        '   }\n'+
        '   table {\n'+
        '       border-collapse : collapse;\n'+
        '       margin      : 10px auto;\n'+
        '       border      : 2px solid #000;\n'+
        '       box-shadow  : 0 0 10px #000;\n'+
        '   }\n'+
        '   td {\n'+
        '       padding     : 5px;\n'+
        '       margin      : 10px auto;\n'+
        '       border-right: 1px solid #999;\n'+
        '   }\n'+
        '   tr.columnnames {\n'+
        '       background  : -moz-linear-gradient(top, #000, #666);\n'+
        '       color       : #fff;\n'+
        '       font-weight : bold;\n'+
        '   }\n'+
        '   tr.machinedata:nth-child(even) {\n'+
        '       background  : #eee;\n'+
        '   }\n'+
        '   tr.machinedata:nth-child(odd) {\n'+
        '       background-color: #bbb;\n'+
        '       background  : -moz-linear-gradient(top, #bbb, #ddd);\n'+
        '   }\n'+
        '</style>\n'+
        '<h1>Máquinas etiquetadas el '+((new Date).toLocaleString().replace(regexpHour, ''))+'</h1>\n'+
        '<h3>'+this.model.markedMachines.length+' Etiquetadas, '+this.model.checkedMachinesAmount+' Analizadas - Comenzado a las '+hStarted+', Terminado a las '+hFinished+'</h3>\n'+
        '<table>\n'+
        '   <tr class="columnnames">\n'+
        '       <td>N°</td><td>Referencia</td><td>Enlace</td><td>Tipo</td><td>Hora etiquetada</td>\n'+
        '   </tr>\n'+
        '</table>\n'
        ;
        var $table = $body.append(partofcontent).find('table');

        jQuery.each(this.model.markedMachines, function(i, machine){
            var imcUrl = 'http://'+This.model.host+'/mdetalles.php?ID='+machine.id;
            var machineUrl = machine.link; 
            $table.append(
            '   <tr class="machinedata">\n'+
            '       <td>'+(i+1)+'</td><td><a href="'+imcUrl+'" target="_blank" title="Click para abrir enlace de la máquina en IMC">'+(machine.id)+'</a></td><td><a href="'+machineUrl+'" target="_blank" title="Abrir menu con click derecho para copiar.">Abrir</a></td><td>'+(machine.path)+'</td><td>'+(machine.date.match(regexpHour)[0])+'</td>\n'+
            '   </tr>\n'
            );
        });
        $body.append(
            '<script type="text/javascript">\n'+
            '   // Datos de las maquinas etiquetadas para uso especial\n'+
            '   var markedMachines = '+This.model.markedMachines.toSource()+';\n'+
            '</script>\n'
        );
        this.view.showButtons('start', 'close'); 
        this.view.showProcessIndicator(false);
        this.finished = true;
    }

};
    
/* Clase constructora encarga de manipular y crear el DOM y salida de texto para la aplicación. */
function imcDebugView(controller, selectorsNS, selectorsES) 
{
    if ( !this.init ) {
        alert('Debe ser un objeto, se debe instanciar.');
    }
    this.init(controller, selectorsNS, selectorsES);
}
    
imcDebugView.prototype = 
{
    
    /* Inicializador */
    init: function(controller, selectorsNS, selectorsES) 
    {
        this.controller = controller;
        this.selectors = {
            ns: selectorsNS,
            es: selectorsES
        };
        this.processInterval = '';

        /* Definiendo los identificadores para el DOM de la aplicación.*/
        this.domNSID = 'imcDebugView'+Math.random().toString().replace('.','');
        this.domIDs  = {
            ct         : this.domNSID,
            ctSettings : this.domNSID+'-settings',
            ctSelectors: this.domNSID+'-selectors',
            ctPhases   : this.domNSID+'-phases',
            ctControls : this.domNSID+'-controls',
            phase1     : this.domNSID+'-phase1',
            phase2     : this.domNSID+'-phase2',
            phase3     : this.domNSID+'-phase3',
            buyProjects: this.domNSID+'-buyProjects',
            close      : this.domNSID+'-close',
            start      : this.domNSID+'-start',
            pause      : this.domNSID+'-pause',
            resume     : this.domNSID+'-resume',
            finish     : this.domNSID+'-finish',            
            process    : this.domNSID+'-process',
            ctMessages : this.domNSID+'-ctMessages',
            message1   : this.domNSID+'-message1',
            message2   : this.domNSID+'-message2',
            message3   : this.domNSID+'-message3'
        };

        /* Identificadores y codigo del DOM para los selectores dependiendo de la cantidad de los mismos. */
        var selectorsDomCode = ''; var This = this;
        jQuery.each(this.selectors.ns, function(i, ns) {
            This.domIDs[ns]   = This.domNSID+'-'+ns;
            selectorsDomCode += '           <select id="'+This.domIDs[ns]+'"></select>\n';
        });

        /* Identificadores para los checkbox de las fases a depurar. Que son 4. */
        var phasesCheckBoxesDomCode = '', pCBDCSeparators = ['           ', '           | ', '           | '], This = this;
        jQuery.each(pCBDCSeparators, function(i, separator) {
            var phaseID              = This.domIDs['phase'+(i+1)];
            var phaseText            = 'Fase '+(i+1)+' ';
            phasesCheckBoxesDomCode += separator+'<input type="checkbox" id="'+phaseID+'" /><label for="'+phaseID+'">'+phaseText+'</label>\n';
        });
        phasesCheckBoxesDomCode += '<br /><input type="checkbox" id="'+this.domIDs.buyProjects+'" /><label for="'+this.domIDs.buyProjects+'">Proyectos de compra</label>\n';

        /* Borramos la interfaz en caso de existir al duplicar el codigo manualmente */
        jQuery('#'+this.domIDs.ct).remove().unbind().find('*').unbind();


        /* Añadimos el código fuente DOM de la aplicación con sus identificadores. */
        jQuery('body').append(
            '\n\n<div id="'+this.domIDs.ct+'">\n'+
            '   <button id="'+this.domIDs.close+'">X</button><span id="'+this.domIDs.process+'"></span>\n'+
            '   <h1>Depurador de máquinas</h1>\n'+
            '   <div id="'+this.domIDs.ctSettings+'">\n'+
            '       <div id="'+this.domIDs.ctSelectors+'">\n'+
            selectorsDomCode+
            '       </div>\n'+
            '       <div id="'+this.domIDs.ctPhases+'">\n'+
            phasesCheckBoxesDomCode+
            '       </div>\n'+
            '   </div>\n'+
            '   <div id="'+this.domIDs.ctMessages+'">\n'+
            '       <div id="'+this.domIDs.message1+'"></div>\n'+
            '       <div id="'+this.domIDs.message2+'"></div>\n'+
            '       <div id="'+this.domIDs.message3+'">Esperando inicio</div>\n'+
            '   </div>\n'+
            '   <div id="'+this.domIDs.ctControls+'">\n'+
            '       <button id="'+this.domIDs.start+'">Iniciar</button><button id="'+this.domIDs.pause+'">Pausar</button><button id="'+this.domIDs.resume+'">Reanudar</button><button id="'+this.domIDs.finish+'">Terminar</button>\n'+
            '   </div>\n'+
            '</div>\n'
        );

        /* Borramos los estilos en caso de haber duplicidad. */
        jQuery('#imcDebug-styles').remove();
        /* Estilos para el DOM de la aplicación. */
        jQuery('body').append(
            '<style type="text/css" id="imcDebug-styles">\n'+
            '#'+this.domIDs.ct+' {\n'+
            '    position      : fixed;\n'+
            '    top           : 10px;\n'+
            '    right         : 10px;\n'+ 
            '    border        : 1px solid #000;\n'+ 
            '    border-radius : 5px;\n'+ 
            '    padding       : 5px;\n'+
            '    background    : #f7faff;\n'+
            '    z-index       : 999999;\n'+
            '    background    : -moz-linear-gradient(bottom, rgb(255,255,255), rgb(200,200,200));\n'+
            '    box-shadow    : 0px 0px 10px #000;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' *, -moz-focus-inner {\n'+
            '    font-family   : calibri;\n'+
            '    margin        : 0;\n'+
            '    padding       : 0;\n'+ 
            '}\n'+
            '#'+this.domIDs.ct+' button {\n'+
            '    cursor        : pointer;\n'+
            '    margin        : 0 5px;\n'+
            '    padding       : 3px 7px;\n'+ 
            '    border        : 2px solid #000;\n'+
            '    border-radius : 15px;\n'+ 
            '    background    : #000;\n'+
            '    font-size     : 15px;\n'+
            '    font-weight   : bold;\n'+
            '    color         : #e9e9e9;\n'+
            '    float         : right;\n'+
            '    box-shadow    : 0px 0px 5px #666;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' button:hover {\n'+
            '    border        : 2px solid #000;\n'+
            '    background    : #e9e9e9;\n'+
            '    color         : #000;\n'+
            '}\n'+
            '#'+this.domIDs.close+' {\n'+
            '    position      : absolute;\n'+
            '    margin        : 0!important;\n'+
            '    top           : 5px;\n'+
            '    right         : 5px;\n'+ 
            '    padding       : 2px 5px!important;\n'+
            '    font-size     : 11px!important;\n'+
            '    border-radius : 15px;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' h1 {\n'+
            '    font-size     : 20px;\n'+
            '    margin        : 5px 60px 10px 5px;\n'+
            '    color         : #444;\n'+ 
            '    border-radius : 5px;\n'+
            '    cursor        : move;\n'+
            '    text-shadow   : 0px 0px 2px #666;\n'+
            '}\n'+
            '#'+this.domIDs.ctSettings+' {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.ctSelectors+' {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.ctSelectors+' select {\n'+
            '    text-align    : right;\n'+
            '    font-size     : 16px;\n'+
            '}\n'+
            '#'+this.domIDs.ctPhases+' {\n'+
            '    margin        : 10px 0;\n'+
            '}\n'+
            '#'+this.domIDs.ctPhases+' checkbox {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.ctControls+' {\n'+
            '    overflow: hidden;\n'+
            '}\n'+
            '#'+this.domIDs.ctControls+' button {\n'+
            '}\n'+
            '#'+this.domIDs.process+' {\n'+
            '    position  : absolute;\n'+
            '    left      : 5px;\n'+
            '    bottom    : 0;\n'+
            '    display   : none;\n'+
            '    font-size : 22px\n'+
            '}\n'+
            '#'+this.domIDs.ctMessages+'{\n'+
            '    box-shadow  : 0px 0px 5px #866;\n'+
            '    font-size   : 12px;\n'+
            '    font-family : monospace;\n'+
            '    color       : #004;\n'+
            '    margin      : 5px;\n'+
            '    margin-bottom : 8px;\n'+
            '}\n'+
            '#'+this.domIDs.message1+'{\n'+
            '\n'+
            '}\n'+
            '#'+this.domIDs.message2+'{\n'+
            '    font-size   : 16px;\n'+
            '    color       : blue;\n'+
            '    border-bottom : 4px double #000;\n'+
            '}\n'+
            '#'+this.domIDs.message3+'{\n'+
            '    font-size   : 16px;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' .error {\n'+
            '    font-size   : 18px;\n'+
            '    color       : red;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' b {\n'+
            '    font-weight  : bold !important;\n'+
            '}\n'+
            '</style>\n\n'
        );
        /* Deshabilitamos los selectores al inicio de la aplicación para evitar un seleccionamiento inesperado. */
        this.disableSelector(this.selectors.ns[0], true);

        var This = this;
        /* Evento onchange para los selectores */ 
        jQuery('#'+this.domIDs.ctSelectors).find('select').change(function(){
            This.controller.selectSelectorAction(this);
        });

        /* Evento onchange para los checbox */
        jQuery('#'+this.domIDs.ctPhases).find('input:checkbox').change(function(){

            var phaseNS = this.id.replace(/.*-/, '');
            This.controller.checkedPhaseAction(phaseNS, this.checked);

        });

        /* Eventos para los botones. */
        jQuery('#'+this.domIDs.start).click(function(){
            This.controller.startAction();
        });

        jQuery('#'+this.domIDs.pause).click(function(){
            This.controller.pauseAction();
        });
        jQuery('#'+this.domIDs.resume).click(function(){
            This.controller.resumeAction();
        });

        jQuery('#'+this.domIDs.finish).click(function(){
            This.controller.finishAction();
        });

        jQuery('#'+this.domIDs.close).click(function(){
            jQuery('#'+This.domIDs.ct).hide('slow');
        });
    },
    
    /* Hace una acción ejecutando un método del objeto pasado por argumento y 
       pasandole el argumento argumentado.
       si es que aun hay otro selector inferior, ej. 'Tipo'->'Marca'->'Modelo' */
    doNextSelector: function(ns, methodName, arg) {
       var indexNS        = jQuery.inArray(ns, this.selectors.ns);
       var nextSelectorNS = this.selectors.ns[indexNS+1];
       if( nextSelectorNS ) {
           this[methodName](nextSelectorNS, arg);
       }
    },

    /* Llena las opciones de X selector con los datos argumentados en forma [{value:'',text:''},...] */
    fillSelector: function(selectorNS, data)
    {
        var $selector  = jQuery('#'+this.domIDs[selectorNS]);
        var selectorES = jQuery.inArray( selectorNS, this.selectors.ns );
            selectorES = this.selectors.es[selectorES];
        var str_modeloid = "";
        var options = '<option value="" selected="selected">Seleccione '+selectorES+' ('+data.splice(0,1)+')</option>';

        this.clearSelector(selectorNS)
            .disableSelector(selectorNS, true);

        jQuery.each(data, function(i, data) {
            if ( selectorNS == 'model' ) {
                str_modeloid = 'modeloid="'+data.modeloid+'"';
            }
            options += '<option value="'+data.value+'" '+str_modeloid+'>'+data.text+' ('+data.amount+')</option>';
        });
        
        $selector.append(options);

        this.disableSelector(selectorNS, false);

    },

    /* Limpia el selector argumentado y los que le siguen. */
    clearSelector: function(selectorNS) 
    {
        this.controller.debugConfig.selectors[selectorNS] = '';
        var $selector = jQuery('#'+this.domIDs[selectorNS]);
        
        $selector.html('');
        this.doNextSelector(selectorNS, 'clearSelector');

        return this;
    },
    
    /* Deshabilita/habilita el selector argumentado y los que le siguen. */
    disableSelector: function(selectorNS, disable) 
    {
        var $selector = jQuery('#'+this.domIDs[selectorNS]);

        $selector.attr('disabled', disable);
        this.doNextSelector(selectorNS, 'disableSelector', true);

        return this;
    },

    showProcessIndicator: function(show) {

        var $process = jQuery('#'+this.domIDs.process);
        $process.text('');
        if ( show ) {
            var text = ' ...';
            var i    = 0;
            $process.css('display', 'inline');

            clearInterval(this.processInterval);
            this.processInterval = setInterval(function(){
                if( i+1 > text.length ) {
                    $process.text('');
                    i = 0;
                }
                $process.append(text.charAt(i++));

            }, 300);

        } else {
            $process.css('display', 'none');
            clearInterval(this.processInterval);
        }

    },

    showButtons: function() 
    {
        var This = this;
        jQuery('#'+this.domIDs.ct).find('button').hide();
        jQuery.each(arguments, function(i, arg){
            var $button = jQuery('#'+This.domIDs[arg]);
            $button.show();
        });
    },

    disableCheckboxes: function(disable) 
    {
        jQuery("#"+this.domIDs.ctPhases).find('input:checkbox').attr('disabled', disable);
    },

    message1: function(msg) 
    {
        jQuery('#'+this.domIDs.message1).html(msg);
    },

    message2: function(msg) 
    {
        jQuery('#'+this.domIDs.message2).html(msg);
    },

    message3: function(msg)
    {
        jQuery('#'+this.domIDs.message3).html(msg);
    }
    
};

var prevUnLoadFunc = function(ev){ev.preventDefault();};
var scriptjQuery = document.createElement('script');
scriptjQuery.type= 'text/javascript';
scriptjQuery.src = 'https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js';
var scriptjQueryUI = document.createElement('script');
scriptjQueryUI.type= 'text/javascript';
scriptjQueryUI.src = 'https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js';

    /* Se inicializa el objeto de la aplicacion, se supone que el DOM ya esta
       listo al ejecutarlo en la pagina */ 
    if ( !window.jQuery ) {
        document.body.appendChild(scriptjQuery);

        scriptjQuery.onload = function() {
            createObjectImcDebug();
        }
    } else {
        createObjectImcDebug();
    }

    function createObjectImcDebug() {
        document.body.appendChild(scriptjQueryUI);
        scriptjQueryUI.onload = function() {
            window.addEventListener('beforeunload', prevUnLoadFunc, false);
            /* arg1: logRequest, arg2:logCaller */
            window.imcDebug = new imcDebugController(true, true);
            $imcDebugView = jQuery('#'+imcDebug.view.domIDs.ct).draggable().draggable({handle:'h1', containment:'window'});
            $imcDebugView.bind('dragstart', function(){
                    jQuery(this).css('right', 'auto');
            });
        };    
    }
void(0);
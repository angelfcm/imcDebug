/* Clase constructora encargada de hacer las consultas a los archivos, 
   obtiendo datos y modificandolos usando el DOM. */
function imcDebugModel(controller, selectorsNS) 
{
    if ( !this.init ) {
        alert('Debe ser un objeto, se debe instanciar.');
    }
    this.controller = controller;
    this.view       = controller.view;
    this.init(selectorsNS);
}

imcDebugModel.prototype = 
{

    /* Metodo inicializador */
    init: function(selectorsNS) 
    {

        this.host = 'imcmexico.com';
        /* Aqui se pondras los datos de las maquinas etiquedas por el programa */
        this.markedMachines = [];
        if( this.host != document.domain ) {
            alert('El host no coincide con '+this.host);
        }
        this.selectors = {
            ns         : selectorsNS,
            queryFiles : {},
            queryParams: {}
        };
        this.machinesData = {};
        
        /* Se definen los archivos para las consultas de tipos, marcas y modelos de maquinas. */
        var ns          = this.selectors.ns;
        var queryFiles  = this.selectors.queryFiles;
        var queryParams = this.selectors.queryParams;
 
        queryFiles [ns[0]] = 'tablatipos.php';
        queryParams[ns[0]] = 'tipo';
        queryFiles [ns[1]] = 'tablamarcas.php';
        queryParams[ns[1]] = 'marca';
        queryFiles [ns[2]] = 'tablamodelos.php';
        queryParams[ns[2]] = 'modelo';
        
        this.machinesSettings = {
            file: 'tablamaquinas.php',
            selectorsParams: this.selectors.queryParams
        };

        /* Creamos el iframe para las consultas de los datos con un identificador aleatorio para evitar conflictos con codigo recopiado. */
        var nameFrameid = 'imcDebugModel_queryFrame'+Math.random().toString().replace('\.','');
        jQuery('body').append('<iframe name="'+nameFrameid+'" style="display:none;"></iframe>');
        this.queryFrame = window[nameFrameid];
        this.$queryFrame= jQuery('iframe[name='+nameFrameid+']');
    },

    /* Devulve los datos para X selector (tipos, marcas y modelos) */
    getSelectorData: function(selectorNS, selectorsConfig, success) 
    {
        var urlGetData = '';
        var This       = this;
        var nsIndex    = jQuery.inArray(selectorNS, this.selectors.ns);
        var lastNsIndex= this.selectors.ns.length-1;

        jQuery.each( selectorsConfig, function(ns, selectorValue){
            var param   = This.selectors.queryParams[ns];
            urlGetData += param+'='+selectorValue+'&';
        });
        var queryFile = this.selectors.queryFiles[selectorNS];
        
        /* Abrimos el archivo con la consulta del selector y definimos la funcion al cargarse el contenido. */
        this.$queryFrame.attr('src', queryFile+'?'+urlGetData);
        var This = this;
        
        this.$queryFrame.unbind('load');
        this.$queryFrame.load( function() {
        
            /* Filas contenedoras de los datos para tipos, marcas y modelos. */
            var $dataRows = jQuery('.listaDatos1', This.queryFrame.document).parent();
            var fixedData = [];
            
            /* Guardamos en fixedData el valor, texto y numero que existe de cada tipo, marca o modelo, ademas de la cantidad total y modeloid */
            var amount = jQuery.trim(jQuery('.listaTotales2:first', This.queryFrame.document).text());
            fixedData.push(amount);
            jQuery.each($dataRows, function(i, row){
                var $row     = jQuery(row);
                var value    = jQuery.trim( $row.find('.listaDatos1').text() );
                /* Capitalizamos el texto que se mostrar치 en pantalla. */
                var text     = value.replace(/^([a-z])|\s+([a-z])/g, function ($c) {
                    return $c.toUpperCase();
                });
                var amount   = jQuery.trim( $row.find('.listaDatos2').text() );  
 
                if ( value ) {
                    var data = {value: value, text: text, amount: amount};
                    if ( nsIndex == lastNsIndex ) {
                        data.modeloid = $row[0].getAttribute('onclick').match(/modeloid=\d+/)[0].replace('modeloid=', '');
                    }
                    fixedData.push(data);
                }
            });
            
            /* Llamamos la funcion argumentada y pasamos el resultado obtenido. */
            success(fixedData);
        });
    },

    getPageMachines: function(trackingConfig, modeloid, success)
    {
        var urlGetData = '';
        var This = this;

        jQuery.each(trackingConfig.getDataConfig, function(ns, selectorValue){
            var param = This.machinesSettings.selectorsParams[ns];
            urlGetData += param+'='+selectorValue+'&';
        });

        urlGetData += 'modeloid='+modeloid+'&actual='+(trackingConfig.index.page+1);

        var queryFile = this.machinesSettings.file;

        /* Abrimos el archivo con la consulta del selector y definimos la funcion al cargarse el contenido. */
        this.$queryFrame.attr('src', queryFile+'?'+urlGetData);
        
        this.$queryFrame.unbind('load');
        this.$queryFrame.load( function() {
        
            /* Filas contenedoras de los datos para tipos, marcas y modelos. */
            var $dataRows1 = jQuery('tr[id^="fila"]:even', This.queryFrame.document);
            var $dataRows2 = jQuery('tr[id^="fila"]:odd', This.queryFrame.document);
            var fixedData  = [];
            
            /* Primera fila de la maquina que contiene el ID */
            jQuery.each($dataRows1, function(i, row){/* AUN FALTA AQUI*/
                var $row1     = jQuery(row); 
                var indexRow  = $dataRows1.index($row1);
                var $row2     = $dataRows2.eq(indexRow);
                var id        = jQuery.trim($row1.find('td:eq(1)')[0].getAttribute('onclick').match(/ID=\d+\&/)[0].replace(/ID=|\&/g, ''));
                var alreadyMarked  = $row1.css('background-color') == 'rgb(234, 208, 208)';
                var phases    = {};
                /* Registra 'tiene proyectos de compra' (es una fase) */
                var buyProjects = $row2.is(':contains("Tiene proyectos de compra")');

                /* Registra las fases activas */
                for( var i = 1; i <= 3; i++ ) {
                    phases['phase'+i] = $row2.is(':contains("Fase '+i+'")');
                }
                phases['buyProjects'] = buyProjects;

                try {
                /* Segunda fila de la maquina que contiene el enlace original */
                var link  = $row2.find('td:eq(1) a:contains("(Ver enlace original)")')[0].href;
                } catch(err) {
                    This.controller.pause = true;
                    This.checkPause('<span class="error">Debes iniciar sesi칩n para continuar.</span>');
                    return false;
                }

                fixedData.push({ id: id, link: link, phases: phases, alreadyMarked: alreadyMarked });
            });
            
            /* Llamamos la funcion argumentada y pasamos el resultado obtenido. */
            success(fixedData);
        });
    },

    debuggingProcess: function(trackingConfig, success) 
    {
        /* Guarda en machinesData, la ruta que tendr치n las m치quinas de cada modelo en el siguiente orden 
            { 
                amount: n,
                tipo1: { 
                    amount: n,
                    marca1: { 
                        amount: n,
                        modelo1: {amount: n, pages: [], modeloid: id} 
                    } 
                },
                tipo2: {...}, 
                ...
            } 
           Los datos que se descargan usando getSelectorData que los devuelve asi [{value:'', text:'', amount: n}, ...] y se arreglan como arriba se muestra..
        */
        var This              = this;
        var selectors         = this.selectors.ns;
        var lastSelectorIndex = selectors.length-1;
        var tracking          = this.machinesData;
        var selectorKeys      = {};

        /* En caso de pedir pausa se detiene el proceso, pero no se termina. */
        if(this.checkPause('Pausado por el usuario')) return;

        /* Funcion encargada de marcar el rastreo donde se buscaran y depuraran las maquinas, dependiendo de que indice de tipo, marca y modelo tenga trackingConfig.indexValue.:seector:*/
        var setTracking = function(iNS, prevValue, success) {
            /* En caso de pedir pausa se detiene el proceso, pero no se termina. */
            if(This.checkPause('Pausado por el usuario')) return;

            if ( iNS > lastSelectorIndex ) {
                success();
                return;
            }
            var ns            = selectors[iNS];
            var getDataConfig = trackingConfig.getDataConfig;

            var keysValues = Object.keys(tracking);
            selectorKeys[ns] = keysValues;
            var value      = keysValues[ trackingConfig.index[ns] + 1 ];

            if ( !value ) {
                
                console.log(This.pathMessage());
                This.view.message1(This.pathMessage());

                This.getSelectorData(ns, getDataConfig, function(data) {
                    
                    jQuery.each(This.fixData(data), function(k, v) {
                        tracking[k] = v;
                    });
                    setTracking(iNS, getDataConfig, success);
                });
                return;
            }

            getDataConfig[ns] = value;
            tracking          = tracking[value];
            setTracking(++iNS, value, success);
        };

        /* Marcamos el puntero/rastreo donde se buscaran las maquinas */
        setTracking(0, null, function(){

            /* Buscamos las maquinas para X pagina del rastreo */
            This.getPageMachines(trackingConfig, tracking.modeloid, function(pageMachines){

                if ( !tracking.pages ) {
                    tracking.pages = [];
                }
                tracking.pages.push(pageMachines);

                /* Ahora si comenzamos a depurar por paginas. */
                This.debugPageMachines(tracking, trackingConfig, function(connectionError){
                    /*Movemos a la siguiente pagina y si no hay entonces al siguiente modelo y si no al siguiente marca y si no al tipo y si no terminamos. */
                    /* Siempre se le sumara 1 al indice de los selectores ya que en primer lugar siempre esta la propiedad "amount" por lo que se salta */
                    /* Se define la cantidad de paginas que hay en el modelo dependiendo el numero de maquinas, son 20 maquinas por pagina, se suma 1 si hay sobrante. */
                    var numberPages = parseInt(tracking.amount/20) + (tracking.amount%20 ? 1 : 0);
                    var cond1 = trackingConfig.index.page < numberPages-1;
                    var cond2 = trackingConfig.index.model+1 < selectorKeys.model.length-1;
                    var cond3 = trackingConfig.index.mark+1 < selectorKeys.mark.length-1;
                    var cond4 = trackingConfig.index.type+1 < selectorKeys.type.length-1;
                    if( !connectionError && ( cond1 || cond2 || cond3 || cond4 ) ) {
                        trackingConfig.index.machine = 0;
                        /* Movemos a la siguiente pagina */
                        if ( cond1 ) {
                            trackingConfig.index.page++;
                        } else
                        /* Movemos al siguiente modelo, si hay. */
                        if ( cond2 ) {
                            trackingConfig.index.model++;
                            trackingConfig.index.page = 0;
                        } else
                        /* Movemos a la siguiente marca, si hay. */
                        if ( cond3 ) {
                            trackingConfig.index.mark++;
                            trackingConfig.index.page  = 0;
                            trackingConfig.index.model = 0;
                        } else
                        /* Movemos al siguiente tipo, si hay. */
                        if ( cond4 ) {
                            trackingConfig.index.type++;
                            trackingConfig.index.page = 0;
                            trackingConfig.index.model = 0;
                            trackingConfig.index.mark = 0;
                        }

                        if ( This.checkPause('Pausado por el usuario') ) return;

                        /* Se depura en la siguiente pagina del siguiente modelo, marca y tipo si es que se terminaron sus maquinas respectivas. */
                        This.debuggingProcess(trackingConfig, success);
                    } else {
                        if( This.queryWindow ) {
                            This.queryWindow.close();
                        }
                        success();
                    }
                });
            });
        });
    },

    debugPageMachines: function(tracking, trackingConfig, success)
    {
        var getDataConfig = trackingConfig.getDataConfig;
        var numberPage = trackingConfig.index.page+1;
        
        console.log('Depurando m치quinas en '+this.pathMessage());
        this.view.message1(this.pathMessage());
        
        var This = this;
        var page = tracking.pages[ trackingConfig.index.page ];

        var debugMachine = function() {
            var machine = page[ trackingConfig.index.machine ];

            console.log('-------------------------------\n'+This.pathMessage()+'\nID='+machine.id+'\n\nlink original     = '+machine.link);
            This.view.message1(This.pathMessage());

            var checkPhases   = This.controller.debugConfig.checkPhases, hasPhase = false;
            for( var i = 1; i <= 3; i++ ) {
                if ( !checkPhases['phase'+i] && machine.phases['phase'+i] ) {
                    hasPhase = true;
                }
            }
            if ( checkPhases.buyProjects && machine.phases.buyProjects ) {
                hasPhase = true;
            }
            /* Saltamos a la siguiente maquina si esta ya esta marcada o excepcion de fase y evitar solicitudes en vano */
            if ( machine.alreadyMarked || hasPhase ) {
                if ( machine.alreadyMarked ) {
                    console.log('Excepcion de marcada. \n-------------------------------');
                }
                if ( hasPhase ) {
                    console.log('Excepcion de fase. \n-------------------------------');
                }
                next();
                return;
            }

            /* Pedimos permiso para acceder a otro dominio. */
            try {
                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
            } catch(err) {
                This.view.message2('Acepta el privilegio para continuar el proceso.\nO hubo un error, activa \'signed.applets.codebase_principal_support\' en \'about:config\'');
                return;
            }
            /* Funcion reemplazante del evento onload para la carga de un crossdomain ya que un onload comun no funcionaria */
            var onLoadCrossDomain = function(windowObject, success, querySpeed, timeout){
                var previousLocation = windowObject.location.href;
                var elapsedTime = 0;

                (function check() {

                    if ( This.checkPause('Pausado por el usuario') ) return;
                    if ( windowObject.closed ) {
                        This.controller.pause = true;
                        This.checkPause('<span class="error">La ventana del proceso fue cerrada por el usuario, se ha pausado.</span>');
                        return;
                    }

                    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
                    /* Cuando el contenido esta completo en machinery y tractorhouse, en veces se carga un contenido inesperado que redirecciona al contenido correcto, por lo que se espera hasta que sea el correcto que contiene un formulario con el id mencionado abajo. 
                        Pero si la pagina se redirecciona a la pagina de inicio es valido, en machinery, tractorhouse y marketbook, terminan con default.aspx
                    */
                    try {
                        var isCorrectContent = jQuery('#aspnetForm', windowObject.document).length || /(default\.aspx)|(notfound\.aspx)/i.test(windowObject.location.href);
                        var needCaptcha = windowObject.location.href.indexOf('blockedUser') != -1 ? true : false;
                    }catch(err){}

                    if ( needCaptcha ) {
                        var jsResizeWindow = 'javascript:var qWinDeb = imcDebug.model.queryWindow; qWinDeb.resizeTo(400, 400); qWinDeb.moveTo(screen.availWidth/2, screen.availHeight/4);';
                        This.controller.pause = true;
                        This.checkPause('<span class="error">El servidor solicita captcha, entra a la ventana y confirmalo.</span> <br /><a href="'+jsResizeWindow+'">Click para ampliar.</a>');
                        return;
                    }
                    /* Si el contenido esta completo y la direccion anterior es diferente a la nueva, entonces se ha cargado la pagina */
                    if ( windowObject.document.readyState == 'complete' && previousLocation != windowObject.location.href && isCorrectContent ) {
                        /* Con esto evitamos confusion con el proximo enlace de maquina, en caso de redireccionar al mismo enlace ya sea por que no se encontro la maquina o otra razon. */
                        windowObject.location.hash = Math.random();
                        success();
                    } else {
                        if ( elapsedTime >= timeout ) {
                            This.controller.pause = true;
                            This.checkPause('<span class="error">Tiempo de espera excedido, soluciona el problema del internet.</span>');
                            return;
                        } else {
                            setTimeout(check, querySpeed);
                        }
                        elapsedTime += querySpeed;
                    }
                })();
            };

            /* Creamos la ventana si no existe, la cual abrira los enlaces originales. */
            if ( true ) {
                try{ 
                    This.queryWindow  = window.open('', '', 'width=1, height=1, left=0, top=0');
                    This.queryWindow.blur();
                } catch(err){
                    This.controller.pause = true;
                    This.checkPause('<span class="error">Acepta al navegador que se permitan ventanas emergentes y vuelve a intentar.</span>');
                    return;
                }
            }
            This.queryWindow.location = machine.link;

            /* Llamamos a la funcion especial qe detecta la carga de la pagina siendo crossDomain. */
            onLoadCrossDomain(This.queryWindow, function(){
                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');

                /* El metodo de validacion para calificar como vendida o no, es a continuacion */
                var needMarkAsSold = false;

                if ( new RegExp("(default\.aspx)|(notfound=)|("+This.host+")", "i").test(This.queryWindow.location.href) ) {
                    needMarkAsSold = true;
                }

                if ( needMarkAsSold ) {
                    This.markedMachines.push({ 
                        id   : machine.id,
                        path : This.pathMessage(true),
                        date : (new Date).toLocaleString()
                    });

                    console.log('link de respuesta = '+This.queryWindow.location.href+'\n\n Marcar vendida? -> '+needMarkAsSold);

                    var ajax = new XMLHttpRequest();
                    ajax.open('get','cambia.php?op=maquinavendida&noHeader=&maquinaid='+machine.id+'&est=Disponible');
                    ajax.onreadystatechange = function(){
                        if(ajax.status==200){
                            console.log('Marcada como Vendida\n-------------------------------');
                            next();
                            ajax.abort();
                            return;
                        }
                    };
                    ajax.send();
                }

                return;
            }, 10, 15000);
        };
        function next() {
                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
                var pageMachinesLength = page.length;
                if ( trackingConfig.index.machine < pageMachinesLength-1 ) {
                    trackingConfig.index.machine++;
                    /* Debe de haber un tiempo entre consulta minimo de 2000ms ya que rechazan solicitudes continuas */
                    try{This.queryWindow.close();}catch(err){}
                    setTimeout(debugMachine, 10);
                } else {
                    try{This.queryWindow.close();}catch(err){}
                    success();
                }
        }
        debugMachine();
    },

    fixData: function(notFixedData) 
    {
        var totalAmount = notFixedData.splice(0,1)[0];
        totalAmount = parseInt( totalAmount.replace(/,/g,'') );

        var fixedData = {amount: totalAmount};
        jQuery.each(notFixedData, function(i, data){

            var amount = parseInt( data.amount.replace(/,/g,'') );
            fixedData[data.value] = {amount: amount};

            if ( data.modeloid ) {
                fixedData[data.value].modeloid = data.modeloid;
                fixedData[data.value].pages    = [];
            }
        });
        return fixedData;
    },

    checkPause: function(message)
    {
        /* En caso de pedir pausa se detiene el proceso, pero no se termina. */
        if ( this.controller.pause ) {
            this.controller.paused = true;
            this.view.showProcessIndicator(false);
            this.view.showButtons('resume', 'finish');
            this.view.disableCheckboxes(true);
            if(this.queryWindow) {
                this.queryWindow.close();
            }
            this.view.message2(message);
            return true;
        }
        return false;
    },

    pathMessage: function(justpathdata1)
    {
        var trackC  = this.controller.trackingConfig;
        var dataC   = trackC.getDataConfig;
        var pathdata    = {
            type    : dataC.type,
            mark    : dataC.mark || '',
            model   : dataC.model || ''
        };
        var pathText = '';

        jQuery.each(pathdata, function(k, v) {
            if ( k != 'type' ) {
                pathText += ' > ';
            }
            if( v ) {
                pathText += '<b>'+v+'</b>';
            } else { 
                pathText += 'Cargando...';
                return false;
            }
        });

        if ( justpathdata1 ) {
            return pathText;
        }

        var pathdata2    = {
            page    : '',
            machine : '',
            marked  : '(<b>'+(this.markedMachines.length)+' Etiquetadas </b>)'
        };
        try{
            var pathP    = this.machinesData[pathdata.type][pathdata.mark][pathdata.model];
            var ipage    = trackC.index.page;
            pathdata2.page = '<b>Pag '+(ipage+1)+' de '+( parseInt(pathP.amount/20) + (pathP.amount%20 ? 1 : 0) )+'</b>';
            pathdata2.machine = '<b>Maq '+(trackC.index.machine+1)+' de '+pathP.pages[ipage].length+'</b>';
        } catch(err){}

        if ( !pathdata2.page ) {
            return pathText;
        }

        jQuery.each(pathdata2, function(k, v) {
            if( v ) {
                pathText += ' > <b>'+v+'</b>';
            } else if ( k != 'marked' ) { 
                pathText += ' > Cargando...';
                return false;
            }
        });

        return pathText;
    }

};

/* Clase constructora encarga de controlar el modelo y la vista, 
   quien decidira que accion tomar afectando la base de datos y la vista de la aplicaci칩n. */
function imcDebugController() 
{
    if ( !this.init ) {
        alert('Debe ser un objeto, se debe instanciar.');
    }
    this.init();
}

imcDebugController.prototype =  
{

    /* Inicializador */
    init: function()
    {

        this.selectors = {
        /* Namespaces para los tipos, marcas y modelos */
            ns   : ['type', 'mark', 'model'],
        /* Texto de salida para leer los nombres de selectores */
            es   : ['tipo', 'marca', 'modelo']
        };

        this.debugConfig = {
            selectors : {'type': '', 'mark': '', 'model': ''},
            /* Para guardar la cantidad de maquinas de cada seleccion y no perderlas */
            selectorsAmount: {'type': null, 'mark': null, 'model': null},
            /* Cantidad total de maquinas en el sistema */
            machinesTotalAmount: null,
            /* Para para del GET del selector modelo, el modeloid */
            modeloid: null,
            checkPhases: { phase1: false, phase2: false, phase3: false, buyProjects: false }
        };
        this.pause    = false;
        this.paused   = false;
        this.started  = false;
        this.finish   = false;
        this.finished = false;

        /* Se crean los objetos para el modelo y la vista y se ejecuta la accion por default. */
        this.view        = new imcDebugView(this, this.selectors.ns, this.selectors.es);
        this.model       = new imcDebugModel(this, this.selectors.ns);
        this.indexAction();
    },
    
    /* Acci칩n por default */
    indexAction: function()
    {
        this.view.message1('');
        this.view.message2('Preparando...');
        /* Accionamos el selectAction por default al selector de tipos de m치quinas. */ 
        this.fillSelectorAction(this.selectors.ns[0]);
    },

    selectSelectorAction: function(selectorNS, value, amount, modeloid)
    {
        /* Guardamos la configuracion del selector seleccionado */
        this.debugConfig.selectors[selectorNS]       = value;
        this.debugConfig.selectorsAmount[selectorNS] = amount;
        this.debugConfig.modeloid                    = modeloid;
        
        /* guardamos los valores de los selectores en los datos finales para filtrar la depuracion de maquinas. */
        this.setMachinesDataBeforeDebugging(selectorNS, value);

        /* Si no hay valor seleccionado evitamos un error tratando de llenar el siguiente selector. */
        if ( ! value ) {
            return;
        }

        /* SI hay un selector despues del accionado entonces se llena el siguiente. */
        var selectorIndex = jQuery.inArray(selectorNS, this.selectors.ns);
        var nextSelector  = this.selectors.ns[selectorIndex+1];
        if ( nextSelector ) {
            this.view.message2('Cargando '+this.selectors.es[selectorIndex+1]+'s');
            this.fillSelectorAction(nextSelector);
        }

    },

    setMachinesDataBeforeDebugging: function(selectorNS, value) {
        /* Guarda los datos de las maquinas que se buscaran, asi se busca donde se selecciona y no tener que buscar en todos los tipos, marcas y modelos 
           a la hora de comenzar la depuracion.*/
        var This          = this;
        var totalAmount   = this.debugConfig.machinesTotalAmount;
        var trackingData  = this.model.machinesData = {};
        var firstSelector = this.selectors.ns[0];
        var lastSelector  = this.selectors.ns.slice(-1);

        /* Si se selecciona el selector type y no tiene value entonces no se pone el totalAmount. Para los demas tenga o no tenga value se asigna. */
        if ( selectorNS != firstSelector || value && selectorNS == firstSelector ) {
            this.model.machinesData.amount = totalAmount;
        }

        jQuery.each(this.debugConfig.selectors, function(ns, selectorValue){
            /* Objeto donde ira el contenido del selector seleccionado. */
            var contentObject = {};

            if ( ! selectorValue ) {
                return false;
            }

            /* Definimos la propiedad de longitud de maquinas para X selector */
            contentObject.amount = This.debugConfig.selectorsAmount[ns];
            if ( ns == lastSelector ) {
                contentObject.modeloid = This.debugConfig.modeloid;
            }
            /* Definimos el objeto del selector, si es el ultimo, es el de los modelos por lo que usaremos una matriz de datos []*/
            trackingData[selectorValue] = contentObject;
            /* Se sube un nivel para seguir el rastreo hasta el ultimo selector seleccionado. */
            trackingData = trackingData[selectorValue];
        });
    },

    fillSelectorAction: function(selectorNS) {
        var This             = this;
        var currentSelection = this.debugConfig.selectors;

        this.view.showProcessIndicator(true);
        this.view.showButtons();
        this.view.disableSelector('type', true);

        this.model.getSelectorData(selectorNS, currentSelection, function(resultData) {
            This.view.message2('Esperando inicio');
            This.view.showButtons('start', 'close');

            jQuery.each(This.selectors.ns, function(i, ns){
                This.view.disableSelector(ns, false);
            });

            if ( selectorNS == 'type' ) {
                This.debugConfig.machinesTotalAmount = resultData[0];
            }
            /* Llenamos el selector con el mismo orden del resultData, es decir [{value: '', text: '', amount: n }, {}, ...].  */
            This.view.fillSelector(selectorNS, resultData);
            /* Quitamos el efecto de operaci칩n en proceso. */
            This.view.showProcessIndicator(false);
        });  
    },

    checkedPhaseAction: function(phaseNS, checked) 
    {
        this.debugConfig.checkPhases[phaseNS] = checked;
    },

    startDebuggingAction: function() 
    {
        this.view.showButtons('pause');
        this.view.disableCheckboxes(true);

        var This = this;
        this.trackingConfig = {
            index         : {
                type   : 0,
                mark   : 0,
                model  : 0,
                page   : 0,
                machine: 0
            },
            getDataConfig : {}
        };
        jQuery.each(this.debugConfig.selectors, function(ns, selectorValue) {
            This.trackingConfig.index[ns]    = 0;
            This.trackingConfig.getDataConfig[ns] = selectorValue;
        });

        var isEmpty = !Object.keys(this.model.machinesData).length;
        if ( isEmpty ) {
            this.model.getSelectorData(this.selectors.ns[0], '', function(notFixedData){
                This.view.message2('DEPURANDO');
                This.model.machinesData = This.model.fixData(notFixedData);
                This.model.debuggingProcess(This.trackingConfig, function(){
                    This.success();        
                });
            });
        } else {
            This.view.message2('DEPURANDO');
            this.model.debuggingProcess(this.trackingConfig, function(){ 
                This.success();
            });
        }
    },

    startAction: function()
    {
        this.view.showProcessIndicator(true);
        this.view.message2('Iniciando...');
        this.finished = false;
        this.started  = true;
        this.view.disableSelector('type', true);
        this.view.showButtons();
        this.startDebuggingAction();
    },

    pauseAction: function()
    {
        this.view.showProcessIndicator(true);
        this.view.message2('Pausando...');
        this.pause = true;
        this.view.showButtons();
    },

    resumeAction: function()
    {
        this.view.showProcessIndicator(true);
        this.view.message2('Reanudando...');
        this.pause  = false;
        this.paused = false;
        var This    = this;
        this.model.debuggingProcess(this.trackingConfig, function(){ This.success() });
        this.view.showButtons('pause');
        this.view.disableCheckboxes(false);
    },

    finishAction: function()
    {
        this.view.showProcessIndicator(true);
        this.view.message2('Terminando...');
        this.pause = false;
        this.paused = false;
        this.view.disableSelector('type', false);
        this.view.disableCheckboxes(false);
        this.view.showButtons('start', 'close'); 
        this.success();
    },

    success: function(){
        if (this.model.markedMachines == 0) {
            this.view.showProcessIndicator(false);
            this.view.message1('');
            this.view.message2('No hubo etiquetadas.');
            return;
        }
        var This = this;
        this.view.showProcessIndicator(true);
        this.resultWindow = window.open('','','width='+(screen.availWidth/2)+', height='+(screen.availHeight/2)+', top=0, left=0');
        this.title = 'M치quinas etiquetadas - '+(new Date).toLocaleString();
        var regexpHour = /(\d\d:?){3} \w\.\w\./i;
        var $body = jQuery(this.resultWindow.document.body);
        var partofcontent = 
        '\n<style>\n'+
        '   * {\n'+
        '       margin      : 0;\n'+
        '       padding     : 0;\n'+
        '       font-family : calibri;\n'+
        '   }\n'+
        '   h1 {\n'+
        '       margin      : 15px auto;\n'+
        '       text-shadow : 0 0 3px #666;\n'+
        '   }\n'+
        '   h2 {\n'+
        '       margin-left : 10%;\n'+
        '   }\n'+
        '   table {\n'+
        '       border-collapse : collapse;\n'+
        '       margin      : 10px auto;\n'+
        '       border      : 2px solid #000;\n'+
        '       box-shadow  : 0 0 10px #000;\n'+
        '   }\n'+
        '   td {\n'+
        '       padding     : 5px;\n'+
        '       margin      : 10px auto;\n'+
        '       border-right: 1px solid #999;\n'+
        '   }\n'+
        '   tr.columnnames {\n'+
        '       background  : -moz-linear-gradient(top, #000, #666);\n'+
        '       color       : #fff;\n'+
        '       font-weight : bold;\n'+
        '   }\n'+
        '   tr.machinedata:nth-child(even) {\n'+
        '       background  : #eee;\n'+
        '   }\n'+
        '   tr.machinedata:nth-child(odd) {\n'+
        '       background-color: #bbb;\n'+
        '       background  : -moz-linear-gradient(top, #bbb, #ddd);\n'+
        '   }\n'+
        '</style>\n'+
        '<h1>M치quinas etiquetadas el '+((new Date).toLocaleString().replace(regexpHour, ''))+'</h1>\n'+
        '<h2>'+this.model.markedMachines.length+' etiquetadas</h2>\n'+
        '<table>\n'+
        '   <tr class="columnnames">\n'+
        '       <td>N춿</td><td>Referencia</td><td>Tipo</td><td>Hora etiquetada</td>\n'+
        '   </tr>\n'+
        '</table>\n'
        ;
        var $table = $body.append(partofcontent).find('table');

        jQuery.each(this.model.markedMachines, function(i, machine){
            var urlMachine = 'http://'+This.model.host+'/mdetalles.php?ID='+machine.id;
            $table.append(
            '   <tr class="machinedata">\n'+
            '       <td>'+(i+1)+'</td><td><a href="'+urlMachine+'" target="_blank">'+(machine.id)+'</a></td><td>'+(machine.path)+'</td><td>'+(machine.date.match(regexpHour)[0])+'</td>\n'+
            '   </tr>\n'
            );
        });
        $body.append(
            '<script type="text/javascript">\n'+
            '   // Datos de las maquinas etiquetadas para uso especial\n'+
            '   var markedMachines = '+This.model.markedMachines.toSource()+';\n'+
            '</script>\n'
        );
        this.view.showProcessIndicator(false);
        this.view.message1('');
        this.view.message2('TERMINADO!');
        /* Quitamos el bloqueo de la pagina */
        window.removeEventListener('beforeunload', prevUnLoadFunc, false);
    }

};
    
/* Clase constructora encarga de manipular y crear el DOM y salida de texto para la aplicaci칩n. */
function imcDebugView(controller, selectorsNS, selectorsES) 
{
    if ( !this.init ) {
        alert('Debe ser un objeto, se debe instanciar.');
    }
    this.init(controller, selectorsNS, selectorsES);
}
    
imcDebugView.prototype = 
{
    
    /* Inicializador */
    init: function(controller, selectorsNS, selectorsES) 
    {
        this.controller = controller;
        this.selectors = {
            ns: selectorsNS,
            es: selectorsES
        };
        this.processInterval = '';

        /* Definiendo los identificadores para el DOM de la aplicaci칩n.*/
        this.domNSID = 'imcDebugView';
        this.domIDs  = {
            ct         : this.domNSID,
            ctSettings : this.domNSID+'-settings',
            ctSelectors: this.domNSID+'-selectors',
            ctPhases   : this.domNSID+'-phases',
            ctControls : this.domNSID+'-controls',
            phase1     : this.domNSID+'-phase1',
            phase2     : this.domNSID+'-phase2',
            phase3     : this.domNSID+'-phase3',
            buyProjects: this.domNSID+'-buyProjects',
            close      : this.domNSID+'-close',
            start      : this.domNSID+'-start',
            pause      : this.domNSID+'-pause',
            resume     : this.domNSID+'-resume',
            finish     : this.domNSID+'-finish',            
            process    : this.domNSID+'-process',
            ctMessages : this.domNSID+'-ctMessages',
            message1   : this.domNSID+'-message1',
            message2   : this.domNSID+'-message2'
        };

        /* Identificadores y codigo del DOM para los selectores dependiendo de la cantidad de los mismos. */
        var selectorsDomCode = ''; var This = this;
        jQuery.each(this.selectors.ns, function(i, ns) {
            This.domIDs[ns]   = This.domNSID+'-'+ns;
            selectorsDomCode += '           <select id="'+This.domIDs[ns]+'"></select>\n';
        });

        /* Identificadores para los checkbox de las fases a depurar. Que son 4. */
        var phasesCheckBoxesDomCode = '', pCBDCSeparators = ['           ', '           | ', '           | '], This = this;
        jQuery.each(pCBDCSeparators, function(i, separator) {
            var phaseID              = This.domIDs['phase'+(i+1)];
            var phaseText            = 'Fase '+(i+1)+' ';
            phasesCheckBoxesDomCode += separator+'<input type="checkbox" id="'+phaseID+'" /><label for="'+phaseID+'">'+phaseText+'</label>\n';
        });
        phasesCheckBoxesDomCode += '<br /><input type="checkbox" id="'+this.domIDs.buyProjects+'" /><label for="'+this.domIDs.buyProjects+'">Proyectos de compra</label>\n';

        /* Borramos la interfaz en caso de existir al duplicar el codigo manualmente */
        jQuery('#'+this.domIDs.ct).remove().unbind().find('*').unbind();


        /* A침adimos el c칩digo fuente DOM de la aplicaci칩n con sus identificadores. */
        jQuery('body').append(
            '\n\n<div id="'+this.domIDs.ct+'">\n'+
            '   <button id="'+this.domIDs.close+'">X</button><span id="'+this.domIDs.process+'"></span>\n'+
            '   <h1>Depurador de m치quinas</h1>\n'+
            '   <div id="'+this.domIDs.ctSettings+'">\n'+
            '       <div id="'+this.domIDs.ctSelectors+'">\n'+
            selectorsDomCode+
            '       </div>\n'+
            '       <div id="'+this.domIDs.ctPhases+'">\n'+
            phasesCheckBoxesDomCode+
            '       </div>\n'+
            '   </div>\n'+
            '   <div id="'+this.domIDs.ctMessages+'">\n'+
            '       <div id="'+this.domIDs.message1+'"></div>\n'+
            '       <div id="'+this.domIDs.message2+'">Esperando inicio</div>\n'+
            '   </div>\n'+
            '   <div id="'+this.domIDs.ctControls+'">\n'+
            '       <button id="'+this.domIDs.start+'">Iniciar</button><button id="'+this.domIDs.pause+'">Pausar</button><button id="'+this.domIDs.resume+'">Reanudar</button><button id="'+this.domIDs.finish+'">Terminar</button>\n'+
            '   </div>\n'+
            '</div>\n'
        );

        /* Borramos los estilos en caso de haber duplicidad. */
        jQuery('#imcDebug-styles').remove();
        /* Estilos para el DOM de la aplicaci칩n. */
        jQuery('body').append(
            '<style type="text/css" id="imcDebug-styles">\n'+
            '#'+this.domIDs.ct+' {\n'+
            '    position      : fixed;\n'+
            '    top           : 10px;\n'+
            '    right         : 10px;\n'+ 
            '    border        : 1px solid #000;\n'+ 
            '    border-radius : 5px;\n'+ 
            '    padding       : 5px;\n'+
            '    background    : #f7faff;\n'+
            '    z-index       : 999999;\n'+
            '    background    : -moz-linear-gradient(bottom, rgb(255,255,255), rgb(200,200,200));\n'+
            '    box-shadow    : 0px 0px 10px #000;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' *, -moz-focus-inner {\n'+
            '    font-family   : calibri;\n'+
            '    margin        : 0;\n'+
            '    padding       : 0;\n'+ 
            '}\n'+
            '#'+this.domIDs.ct+' button {\n'+
            '    cursor        : pointer;\n'+
            '    margin        : 0 5px;\n'+
            '    padding       : 3px 7px;\n'+ 
            '    border        : 2px solid #000;\n'+
            '    border-radius : 15px;\n'+ 
            '    background    : #000;\n'+
            '    font-size     : 15px;\n'+
            '    font-weight   : bold;\n'+
            '    color         : #e9e9e9;\n'+
            '    float         : right;\n'+
            '    box-shadow    : 0px 0px 5px #666;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' button:hover {\n'+
            '    border        : 2px solid #000;\n'+
            '    background    : #e9e9e9;\n'+
            '    color         : #000;\n'+
            '}\n'+
            '#'+this.domIDs.close+' {\n'+
            '    position      : absolute;\n'+
            '    margin        : 0!important;\n'+
            '    top           : 5px;\n'+
            '    right         : 5px;\n'+ 
            '    padding       : 2px 5px!important;\n'+
            '    font-size     : 11px!important;\n'+
            '    border-radius : 15px;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' h1 {\n'+
            '    font-size     : 20px;\n'+
            '    margin        : 5px 60px 10px 5px;\n'+
            '    color         : #444;\n'+ 
            '    border-radius : 5px;\n'+
            '    cursor        : move;\n'+
            '    text-shadow   : 0px 0px 2px #666;\n'+
            '}\n'+
            '#'+this.domIDs.ctSettings+' {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.ctSelectors+' {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.ctSelectors+' select {\n'+
            '    text-align    : right;\n'+
            '    font-size     : 16px;\n'+
            '}\n'+
            '#'+this.domIDs.ctPhases+' {\n'+
            '    margin        : 10px 0;\n'+
            '}\n'+
            '#'+this.domIDs.ctPhases+' checkbox {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.ctControls+' {\n'+
            '    overflow: hidden;\n'+
            '}\n'+
            '#'+this.domIDs.ctControls+' button {\n'+
            '}\n'+
            '#'+this.domIDs.process+' {\n'+
            '    position  : absolute;\n'+
            '    left      : 5px;\n'+
            '    bottom    : 0;\n'+
            '    display   : none;\n'+
            '    font-size : 22px\n'+
            '}\n'+
            '#'+this.domIDs.ctMessages+'{\n'+
            '    box-shadow  : 0px 0px 5px #866;\n'+
            '    font-size   : 12px;\n'+
            '    font-family : monospace;\n'+
            '    color       : #004;\n'+
            '    margin      : 5px;\n'+
            '    margin-bottom : 8px;\n'+
            '}\n'+
            '#'+this.domIDs.message1+'{\n'+
            '    border-bottom : 4px double #000;\n'+
            '}\n'+
            '#'+this.domIDs.message2+'{\n'+
            '    font-size: 16px;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' .error {\n'+
            '    font-size: 18px;\n'+
            '    color    : red;\n'+
            '}\n'+
            '</style>\n\n'
        );
        /* Deshabilitamos los selectores al inicio de la aplicaci칩n para evitar un seleccionamiento inesperado. */
        this.disableSelector(this.selectors.ns[0], true);

        var This = this;
        /* Evento onchange para los selectores */ 
        jQuery('#'+this.domIDs.ctSelectors).find('select').change(function(){

            This.showProcessIndicator(true);

            var selectorNS = this.id.replace(/.*-/i, '');
            This.disableSelector(selectorNS, false)
                .doNextSelector(selectorNS, 'clearSelector');

            var amount   = jQuery(this).find('option:selected').text().replace(/,/g,'').match(/\(\d*\)/)[0].replace(/\(|\)/g,'').replace(/,/g, '');
            var modeloid = jQuery(this).find('option:selected').attr('modeloid');
            This.controller.selectSelectorAction(selectorNS, this.value, parseInt(amount), modeloid);

        });

        /* Evento onchange para los checbox */
        jQuery('#'+this.domIDs.ctPhases).find('input:checkbox').change(function(){

            var phaseNS = this.id.replace(/.*-/, '');
            This.controller.checkedPhaseAction(phaseNS, this.checked);

        });

        /* Eventos para los botones. */
        jQuery('#'+this.domIDs.start).click(function(){
            This.controller.startAction();
        });

        jQuery('#'+this.domIDs.pause).click(function(){
            This.controller.pauseAction();
        });
        jQuery('#'+this.domIDs.resume).click(function(){
            This.controller.resumeAction();
        });

        jQuery('#'+this.domIDs.finish).click(function(){
            This.controller.finishAction();
        });

        jQuery('#'+this.domIDs.close).click(function(){
            jQuery('#'+This.domIDs.ct).hide('slow');
        });
    },
    
    /* Hace una acci칩n ejecutando un m칠todo del objeto pasado por argumento y 
       pasandole el argumento argumentado.
       si es que aun hay otro selector inferior, ej. 'Tipo'->'Marca'->'Modelo' */
    doNextSelector: function(ns, methodName, arg) {
       var indexNS        = jQuery.inArray(ns, this.selectors.ns);
       var nextSelectorNS = this.selectors.ns[indexNS+1];
       if( nextSelectorNS ) {
           this[methodName](nextSelectorNS, arg);
       }
    },

    /* Llena las opciones de X selector con los datos argumentados en forma [{value:'',text:''},...] */
    fillSelector: function(selectorNS, data)
    {
        var $selector  = jQuery('#'+this.domIDs[selectorNS]);
        var selectorES = jQuery.inArray( selectorNS, this.selectors.ns );
            selectorES = this.selectors.es[selectorES];
        var str_modeloid = "";
        var options = '<option value="" selected="selected">Seleccione '+selectorES+' ('+data.splice(0,1)+')</option>';

        this.clearSelector(selectorNS)
            .disableSelector(selectorNS, true);

        jQuery.each(data, function(i, data) {
            if ( selectorNS == 'model' ) {
                str_modeloid = 'modeloid="'+data.modeloid+'"';
            }
            options += '<option value="'+data.value+'" '+str_modeloid+'>'+data.text+' ('+data.amount+')</option>';
        });
        
        $selector.append(options);

        this.disableSelector(selectorNS, false);

    },

    /* Limpia el selector argumentado y los que le siguen. */
    clearSelector: function(selectorNS) 
    {
        this.controller.debugConfig.selectors[selectorNS] = '';
        var $selector = jQuery('#'+this.domIDs[selectorNS]);
        
        $selector.html('');
        this.doNextSelector(selectorNS, 'clearSelector');

        return this;
    },
    
    /* Deshabilita/habilita el selector argumentado y los que le siguen. */
    disableSelector: function(selectorNS, disable) 
    {
        var $selector = jQuery('#'+this.domIDs[selectorNS]);

        $selector.attr('disabled', disable);
        this.doNextSelector(selectorNS, 'disableSelector', true);

        return this;
    },

    showProcessIndicator: function(show) {

        var $process = jQuery('#'+this.domIDs.process);
        $process.text('');
        if ( show ) {
            var text = ' ...';
            var i    = 0;
            $process.css('display', 'inline');

            clearInterval(this.processInterval);
            this.processInterval = setInterval(function(){
                if( i+1 > text.length ) {
                    $process.text('');
                    i = 0;
                }
                $process.append(text.charAt(i++));

            }, 300);

        } else {
            $process.css('display', 'none');
            clearInterval(this.processInterval);
        }

    },

    showButtons: function() 
    {
        var This = this;
        jQuery('#'+this.domIDs.ct).find('button').hide();
        jQuery.each(arguments, function(i, arg){
            var $button = jQuery('#'+This.domIDs[arg]);
            $button.show();
        });
    },

    disableCheckboxes: function(disable) 
    {
        jQuery("#"+this.domIDs.ctPhases).find('input:checkbox').attr('disabled', disable);
    },

    message1: function(msg) 
    {
        jQuery('#'+this.domIDs.message1).html(msg);
    },

    message2: function(msg) 
    {
        jQuery('#'+this.domIDs.message2).html(msg);
    }
    
};

var imcDebug;
var prevUnLoadFunc = function(ev){ev.preventDefault();};
var scriptjQuery = document.createElement('script');
scriptjQuery.type= 'text/javascript';
scriptjQuery.src = 'https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js';
var scriptjQueryUI = document.createElement('script');
scriptjQueryUI.type= 'text/javascript';
scriptjQueryUI.src = 'https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js';

    /* Se inicializa el objeto de la aplicacion, se supone que el DOM ya esta
       listo al ejecutarlo en la pagina */ 
    if ( !window.jQuery ) {
        document.body.appendChild(scriptjQuery);

        scriptjQuery.onload = function() {
            createObjectImcDebug();
        }
    } else {
        createObjectImcDebug();
    }

    function createObjectImcDebug() {
        document.body.appendChild(scriptjQueryUI);
        scriptjQueryUI.onload = function() {
            window.addEventListener('beforeunload', prevUnLoadFunc, false);
            imcDebug = new imcDebugController();
            $imcDebugView = jQuery('#'+imcDebug.view.domIDs.ct).draggable().draggable({handle:'h1', containment:'window'});
            $imcDebugView.bind('dragstart', function(){
                    jQuery(this).css('right', 'auto');
            });
        };    
    }
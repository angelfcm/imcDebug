/* Clase constructora encargada de hacer las consultas a los archivos, 
   obtiendo datos y modificandolos usando el DOM. */
function imcDebugModel(controller, selectorsNS) 
{
    if ( !this.init ) {
        alert('Debe ser un objeto, se debe instanciar.');
    }
    this.controller = controller;
    this.init(selectorsNS);
}

imcDebugModel.prototype = 
{

    /* Metodo inicializador */
    init: function(selectorsNS) 
    {

        this.host = 'imcmexico.com';
        if( this.host.indexOf(location.toString()) == -1 ) {
            /* alert('El host no coincide con '+this.host); */
        }
        this.selectors = {
            ns         : selectorsNS,
            queryFiles : {},
            queryParams: {}
        };
        this.machinesData = {};
        
        /* Se definen los archivos para las consultas de tipos, marcas y modelos de maquinas. */
        var ns          = this.selectors.ns;
        var queryFiles  = this.selectors.queryFiles;
        var queryParams = this.selectors.queryParams;
 
        queryFiles [ns[0]] = 'tiposJX.php';
        queryParams[ns[0]] = 'tipo';
        queryFiles [ns[1]] = 'tablamarcas.php';
        queryParams[ns[1]] = 'marca';
        queryFiles [ns[2]] = 'modelosJX.php';
        queryParams[ns[2]] = 'modelo';
        
        this.machinesSettings = {
            file: 'maquinasJX.php',
            selectorsParams: this.selectors.queryParams
        };

        /* Creamos el iframe para las consultas de los datos con un identificador aleatorio para evitar conflictos con codigo recopiado. */
        var nameFrameid = 'imcDebugModel_queryFrame'+Math.random().toString().replace('\.','');
        jQuery('body').append('<iframe name="'+nameFrameid+'" style="display:none;"></iframe>');
        this.queryFrame = window[nameFrameid];
        this.$queryFrame= jQuery('iframe[name='+nameFrameid+']');
    },

    /* Devulve los datos para X selector (tipos, marcas y modelos) */
    getSelectorData: function(selectorNS, selectorsConfig, success) 
    {
        var urlGetData = '';
        var This       = this;
        var nsIndex    = jQuery.inArray(selectorNS, this.selectors.ns);
        var lastNsIndex= this.selectors.ns.length-1;

        jQuery.each( selectorsConfig, function(ns, selectorValue){
            var param   = This.selectors.queryParams[ns];
            urlGetData += param+'='+selectorValue+'&';
        });
        var queryFile = this.selectors.queryFiles[selectorNS];
        
        /* Abrimos el archivo con la consulta del selector y definimos la funcion al cargarse el contenido. */
        this.$queryFrame.attr('src', queryFile+'?'+urlGetData);
        var This = this;
        
        this.$queryFrame.unbind('load');
        this.$queryFrame.load( function() {
        
            /* Filas contenedoras de los datos para tipos, marcas y modelos. */
            var $dataRows = jQuery('.itemlistagen', This.queryFrame.document);
            var fixedData = [];
            
            /* Guardamos en fixedData el valor, texto y numero que existe de cada tipo, marca o modelo, ademas de la cantidad total y modeloid */
            var amount = jQuery.trim(jQuery('.listagen:eq(1)', This.queryFrame.document).find('td:last').text());
            fixedData.push(amount);
            jQuery.each($dataRows, function(i, row){
                var $row     = jQuery(row);
                var value    = jQuery.trim( $row.find('td:first').text() );
                /* Capitalizamos el texto que se mostrará en pantalla. */
                var text     = value.replace(/^([a-z])|\s+([a-z])/g, function ($1) {
                    return $1.toUpperCase();
                });
                var amount   = jQuery.trim( $row.find('td:last').text() );  
 
                if ( value ) {
                    var data = {value: value, text: text, amount: amount};
                    if ( nsIndex == lastNsIndex ) {
                        data.modeloid = $row[0].getAttribute('onclick').match(/modeloid=\d+/)[0].replace('modeloid=', '');
                    }
                    fixedData.push(data);
                }
            });
            
            /* Llamamos la funcion argumentada y pasamos el resultado obtenido. */
            success(fixedData);
        });
    },

    getPageMachines: function(trackingConfig, modeloid, success)
    {
        var urlGetData = '';
        var This = this;

        jQuery.each(trackingConfig.getDataConfig, function(ns, selectorValue){
            var param = This.machinesSettings.selectorsParams[ns];
            urlGetData += param+'='+selectorValue+'&';
        });

        urlGetData += 'modeloid='+modeloid+'&actual='+(trackingConfig.index.page+1);

        var queryFile = this.machinesSettings.file;

        /* Abrimos el archivo con la consulta del selector y definimos la funcion al cargarse el contenido. */
        this.$queryFrame.attr('src', queryFile+'?'+urlGetData);
        
        this.$queryFrame.unbind('load');
        this.$queryFrame.load( function() {
        
            /* Filas contenedoras de los datos para tipos, marcas y modelos. */
            var $dataRows1 = jQuery('.itemlistagen:even', This.queryFrame.document);
            var $dataRows2 = jQuery('.itemlistagen:odd', This.queryFrame.document);
            var fixedData  = [];
            
            /* Primera fila de la maquina que contiene el ID */
            jQuery.each($dataRows1, function(i, row){/* AUN FALTA AQUI*/
                var $row1     = jQuery(row); 
                var indexRow  = $dataRows1.index($row1);
                var $row2     = $dataRows2.eq(indexRow);
                var id        = jQuery.trim($row1.find('td:eq(1)')[0].getAttribute('onclick').match(/ID=\d+\&/)[0].replace(/ID=|\&/g, ''));
                var phases    = {};
                /* Registra 'tiene proyectos de compra' (es una fase) */
                var buyProjects = $row2.is(':contains("Tiene proyectos de compra")');

                /* Registra las fases activas */
                for( var i = 1; i <= 3; i++ ) {
                    phases['phase'+i] = $row2.is(':contains("Fase '+i+'")');
                }
                phases['buyProjects'] = buyProjects;

                /* Segunda fila de la maquina que contiene el enlace original */
                var link  = $row2.find('td:first a:contains("(Ver enlace original)")')[0].href;

                fixedData.push({ id: id, link: link, phases: phases });
            });
            
            /* Llamamos la funcion argumentada y pasamos el resultado obtenido. */
            success(fixedData);
        });
    },

    debuggingProcess: function(trackingConfig, success) 
    {
        /* Guarda en machinesData, la ruta que tendrán las máquinas de cada modelo en el siguiente orden 
            { 
                tipo1: { 
                    marca1: { 
                        modelo1: [] 
                    } 
                },
                tipo2: {...}, 
                ...
            } 
           Los datos que se descargan usando getSelectorData que los devuelve asi [{value:'', text:'', amount: n}, ...] y se arreglan como arriba se muestra..
        */
        var This              = this;
        var selectors         = this.selectors.ns;
        var lastSelectorIndex = selectors.length-1;
        var tracking          = this.machinesData;

        /* Funcion encargada de marcar el rastreo donde se buscaran y depuraran las maquinas, dependiendo de que indice de tipo, marca y modelo tenga trackingConfig.indexValue.:seector:*/
        var setTracking = function(iNS, prevValue, success) {
            if ( iNS > lastSelectorIndex ) {
                success();
                return;
            }
            var ns            = selectors[iNS];
            var getDataConfig = trackingConfig.getDataConfig;

            var keysValues = Object.keys(tracking);
            var value      = keysValues[ trackingConfig.index[ns] + 1 ];

            if ( !value ) {
                switch(iNS) {
                    case 1: console.log('Buscando marcas para '+prevValue);break;
                    case 2: console.log('Buscando modelos para '+prevValue+' de '+getDataConfig.type);break;
                 }
                This.getSelectorData(ns, getDataConfig, function(data) {
                    
                    jQuery.each(This.fixData(data), function(k, v) {
                        tracking[k] = v;
                    });
                    setTracking(iNS, getDataConfig, success);
                });
                return;
            }

            getDataConfig[ns] = value;
            tracking          = tracking[value];
            setTracking(++iNS, value, success);
        }

        /* Marcamos el puntero/rastreo donde se buscaran las maquinas */
        setTracking(0, null, function(){
            console.log('Rastreo marcado en \"'+trackingConfig.getDataConfig.type+'\">\"'+trackingConfig.getDataConfig.mark+'\">\"'+trackingConfig.getDataConfig.model+'\"');
            console.log('Buscando maquinas en \"'+trackingConfig.getDataConfig.type+'\">\"'+trackingConfig.getDataConfig.mark+'\">\"'+trackingConfig.getDataConfig.model+'\">\"Pagina '+trackingConfig.index.page+'\"');

            /* Buscamos las maquinas para X pagina del rastreo */
            This.getPageMachines(trackingConfig, tracking.modeloid, function(pageMachines){
                console.log('Maquinas encontradas.');
                if ( !tracking.pages ) {
                    tracking.pages = [];
                }
                tracking.pages.push(pageMachines);

                /* Ahora si comenzamos a depurar por paginas. */
                This.debugPageMachines(tracking, trackingConfig, function(){
                    /*Movemos a la siguiente pagina y si no hay entonces al siguiente modelo y si no al siguiente marca y si no al tipo. */
                    success();
                });
            });
        });
    },

    debugPageMachines: function(tracking, trackingConfig, success)
    {
        var This = this;
        var page = tracking.pages[ trackingConfig.index.page ];
        var mainSuccess  = success;
        var dontCloseFunction = function(event){
            event.preventDefault();
        };
        /* Con esta funcion indicamos si debe agregarse el evento beforeunload a la ventana que procesa el link original que al cerrarse muestre una confirmacion de advertencia para que no se interrumpa el proceso */
        var dontCloseEvent = function(setEvent) {
            var setEvent = (setEvent? 'add' : 'remove')+'EventListener';
            This.queryWindow.removeEventListener('beforeunload', dontCloseFunction, false);
            This.queryWindow[setEvent]('beforeunload', dontCloseFunction, false);
        } 
        var debugMachine = function() {
            var machine = page[ trackingConfig.index.machine ];

            /* Pedimos permiso para acceder a otro dominio. */
            try {
                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
            } catch(err) {
                alert('Acepta el privilegio para continuar el proceso.\nO hubo un error, activa \'signed.applets.codebase_principal_support\' en \'about:config\'');
                return;
            }
            /* Funcion reemplazante del evento onload para la carga de un crossdomain ya que un onload comun no funcionaria */
            var onLoadCrossDomain = function(windowObject, success, querySpeed, timeout){
                var previousLocation = windowObject.location.href;
                var elapsedTime = 0;

                (function check() {
                    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
if (windowObject.document.readyState != 'uninitialized'){
   dontCloseEvent(false); console.log(windowObject.document.readyState);
}else{
    dontCloseEvent(true); console.log(windowObject.document.readyState);
}
                    /* Si el contenido esta completo y la direccion anterior es diferente a la nueva, entonces se ha cargado la pagina */
                    if ( windowObject.document.readyState == 'complete' && previousLocation != windowObject.location.href ) {
                        success();
                    } else {
                        if ( elapsedTime >= timeout ) {
                            if ( confirm('Tiempo de espera excedido, soluciona el problema del internet.\n Presiona "Aceptar" para reintentar o "Cancelar" para finalizar.') ) {
                                elapsedTime = 0;
                                setTimeout(check, querySpeed);
                            } else {
                                success(true);
                            }
                        } else {
                            setTimeout(check, querySpeed);
                        }
                        elapsedTime += querySpeed;
                    }
                })();
            };

            /* Creamos la ventana si no existe, la cual abrira los enlaces originales. */
            if ( !This.queryWindow || This.queryWindow.closed ) {
                This.queryWindow  = window.open('', '', 'width=1, height=1, left=0, top=0');
            }
            dontCloseEvent(false);
            /* Cambiamos de enlace original de maquina */
            This.queryWindow.location = machine.link;
            dontCloseEvent(true);

            /* Llamamos a la funcion especial qe detecta la carga de la pagina siendo crossDomain. */
            onLoadCrossDomain(This.queryWindow, function(){

                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
                dontCloseEvent(true);

                console.log(trackingConfig.index.machine+">>>>>\nID="+machine.id+"\nlink original="+machine.link+"\nlink de respuesta="+This.queryWindow.location.href+"\n------");
                console.log(trackingConfig.index.machine+' <= '+(page.length-1));
                trackingConfig.index.machine++;

                if ( trackingConfig.index.machine < page.length ) {
                    debugMachine();
                } else {
                    dontCloseEvent(false);
                    This.queryWindow.close();
                    success();
                }
                return;
            }, 10, 15000);
        };
        debugMachine();
    },

    fixData: function(notFixedData) {
        var fixedData = {amount: parseInt(notFixedData.splice(0,1)[0])};
        jQuery.each(notFixedData, function(i, data){
            fixedData[data.value] = {amount: data.amount};
            if ( data.modeloid ) {
                fixedData[data.value].modeloid = data.modeloid;
                fixedData[data.value].pages    = [];
            }
        });
        return fixedData;
    }

};

/* Clase constructora encarga de controlar el modelo y la vista, 
   quien decidira que accion tomar afectando la base de datos y la vista de la aplicación. */
function imcDebugController() 
{
    if ( !this.init ) {
        alert('Debe ser un objeto, se debe instanciar.');
    }
    this.init();
}

imcDebugController.prototype =  
{

    /* Inicializador */
    init: function()
    {

        this.selectors = {
        /* Namespaces para los tipos, marcas y modelos */
            ns   : ['type', 'mark', 'model'],
        /* Texto de salida para leer los nombres de selectores */
            es   : ['tipo', 'marca', 'modelo']
        };

        this.debugConfig = {
            selectors : {'type': '', 'mark': '', 'model': ''},
            /* Para guardar la cantidad de maquinas de cada seleccion y no perderlas */
            selectorsAmount: {'type': null, 'mark': null, 'model': null},
            /* Cantidad total de maquinas en el sistema */
            machinesTotalAmount: null,
            /* Para para del GET del selector modelo, el modeloid */
            modeloid: null,
            checkPhases: { phase1: false, phase2: false, phase3: false, buyProjects: false }
        };
        /* Se crean los objetos para el modelo y la vista y se ejecuta la accion por default. */
        this.model       = new imcDebugModel(this, this.selectors.ns);
        this.view        = new imcDebugView(this, this.selectors.ns, this.selectors.es);
        this.indexAction();
    },
    
    /* Acción por default */
    indexAction: function()
    {
        /* Accionamos el selectAction por default al selector de tipos de máquinas. */ 
        this.fillSelectorAction(this.selectors.ns[0]);
    },

    selectSelectorAction: function(selectorNS, value, amount, modeloid)
    {
        /* Guardamos la configuracion del selector seleccionado */
        this.debugConfig.selectors[selectorNS]       = value;
        this.debugConfig.selectorsAmount[selectorNS] = amount;
        this.debugConfig.modeloid                    = modeloid;
        
        /* guardamos los valores de los selectores en los datos finales para filtrar la depuracion de maquinas. */
        this.setMachinesDataBeforeDebugging(selectorNS, value);

        /* Si no hay valor seleccionado evitamos un error tratando de llenar el siguiente selector. */
        if ( ! value ) {
            return;
        }

        /* SI hay un selector despues del accionado entonces se llena el siguiente. */
        var selectorIndex = jQuery.inArray(selectorNS, this.selectors.ns);
        var nextSelector  = this.selectors.ns[selectorIndex+1];
        if ( nextSelector ) {
            this.fillSelectorAction(nextSelector);
        }

    },

    setMachinesDataBeforeDebugging: function(selectorNS, value) {
        /* Guarda los datos de las maquinas que se buscaran, asi se busca donde se selecciona y no tener que buscar en todos los tipos, marcas y modelos 
           a la hora de comenzar la depuracion.*/
        var This          = this;
        var totalAmount   = this.debugConfig.machinesTotalAmount;
        var trackingData  = this.model.machinesData = {};
        var firstSelector = this.selectors.ns[0];
        var lastSelector  = this.selectors.ns.slice(-1);

        /* Si se selecciona el selector type y no tiene value entonces no se pone el totalAmount. Para los demas tenga o no tenga value se asigna. */
        if ( selectorNS != firstSelector || value && selectorNS == firstSelector ) {
            this.model.machinesData.amount = totalAmount;
        }

        jQuery.each(this.debugConfig.selectors, function(ns, selectorValue){
            /* Objeto donde ira el contenido del selector seleccionado. */
            var contentObject = {};

            if ( ! selectorValue ) {
                return false;
            }

            /* Definimos la propiedad de longitud de maquinas para X selector */
            contentObject.amount = This.debugConfig.selectorsAmount[ns];
            if ( ns == lastSelector ) {
                contentObject.modeloid = This.debugConfig.modeloid;
            }
            /* Definimos el objeto del selector, si es el ultimo, es el de los modelos por lo que usaremos una matriz de datos []*/
            trackingData[selectorValue] = contentObject;
            /* Se sube un nivel para seguir el rastreo hasta el ultimo selector seleccionado. */
            trackingData = trackingData[selectorValue];
        });
    },

    fillSelectorAction: function(selectorNS) {
        var This             = this;
        var currentSelection = this.debugConfig.selectors;

        /* Mostramos el indicador de que algo anda en proceso. */
        this.view.showProcessIndicator(true);
        this.model.getSelectorData(selectorNS, currentSelection, function(resultData) {
            if ( selectorNS == 'type' ) {
                This.debugConfig.machinesTotalAmount = resultData[0];
            }
            /* Llenamos el selector con el mismo orden del resultData, es decir [{value: '', text: '', amount: n }, {}, ...].  */
            This.view.fillSelector(selectorNS, resultData);
            /* Quitamos el efecto de operación en proceso. */
            This.view.showProcessIndicator(false);
        });  
    },

    checkedPhaseAction: function(phaseNS, checked) {
        this.debugConfig.checkPhases[phaseNS] = checked;
    },

    startDebuggingAction: function() {
        console.log('Preparando depuracion');
        var This = this;
        var trackingConfig = {
            index         : {
                type   : 0,
                mark   : 0,
                model  : 0,
                page   : 0,
                machine: 0
            },
            getDataConfig : {}
        };
        jQuery.each(this.debugConfig.selectors, function(ns, selectorValue) {
            trackingConfig.index[ns]    = 0;
            trackingConfig.getDataConfig[ns] = selectorValue;
        });

        /* Mostramos el indicador de proceso. */
        this.view.showProcessIndicator(true);
        var isEmpty = !Object.keys(this.model.machinesData).length;
        if ( isEmpty ) {
            console.log('Buscando tipos');
            this.model.getSelectorData(this.selectors.ns[0], '', function(notFixedData){
                This.model.machinesData = This.model.fixData(notFixedData);
                This.model.debuggingProcess(trackingConfig, function(){
                    /* Quitamos el indicador de proceso. */
                    This.view.showProcessIndicator(false);  
                    console.log('TERMINADO!.');         
                });
            });
        } else {
            this.model.debuggingProcess(trackingConfig, function(){
                /* Quitamos el indicador de proceso. */
                This.view.showProcessIndicator(false);       
                console.log('TERMINADO!.');    
            });
        }
    },

};
    
/* Clase constructora encarga de manipular y crear el DOM y salida de texto para la aplicación. */
function imcDebugView(Controller, selectorsNS, selectorsES) 
{
    if ( !this.init ) {
        alert('Debe ser un objeto, se debe instanciar.');
    }
    this.init(Controller, selectorsNS, selectorsES);
}
    
imcDebugView.prototype = 
{
    
    /* Inicializador */
    init: function(Controller, selectorsNS, selectorsES) 
    {
        this.Controller = Controller;
        this.selectors = {
            ns: selectorsNS,
            es: selectorsES
        };
        this.processInterval = '';

        /* Definiendo los identificadores para el DOM de la aplicación.*/
        this.domNSID = 'imcDebugView';
        this.domIDs  = {
            ct         : this.domNSID,
            ctSettings : this.domNSID+'-settings',
            ctSelectors: this.domNSID+'-selectors',
            ctPhases   : this.domNSID+'-phases',
            ctControls : this.domNSID+'-controls',
            phase1     : this.domNSID+'-phase1',
            phase2     : this.domNSID+'-phase2',
            phase3     : this.domNSID+'-phase3',
            buyProjects: this.domNSID+'-buyProjects',
            close      : this.domNSID+'-close',
            start      : this.domNSID+'-start',
            pause      : this.domNSID+'-pause',
            process    : this.domNSID+'-process'
        };

        /* Identificadores y codigo del DOM para los selectores dependiendo de la cantidad de los mismos. */
        var selectorsDomCode = ''; var This = this;
        jQuery.each(this.selectors.ns, function(i, ns) {
            This.domIDs[ns]   = This.domNSID+'-'+ns;
            selectorsDomCode += '           <select id="'+This.domIDs[ns]+'"></select>\n';
        });

        /* Identificadores para los checkbox de las fases a depurar. Que son 4. */
        var phasesCheckBoxesDomCode = '', pCBDCSeparators = ['           ', '           | ', '           | '], This = this;
        jQuery.each(pCBDCSeparators, function(i, separator) {
            var phaseID              = This.domIDs['phase'+(i+1)];
            var phaseText            = 'Fase '+(i+1)+' ';
            phasesCheckBoxesDomCode += separator+'<input type="checkbox" id="'+phaseID+'" /><label for="'+phaseID+'">'+phaseText+'</label>\n';
        });
        phasesCheckBoxesDomCode += '<br /><input type="checkbox" id="'+this.domIDs.buyProjects+'" /><label for="'+this.domIDs.buyProjects+'">Proyectos de compra</label>\n';

        /* Borramos la interfaz en caso de existir al duplicar el codigo manualmente */
        jQuery('#'+this.domIDs.ct).remove().unbind().find('*').unbind();


        /* Añadimos el código fuente DOM de la aplicación con sus identificadores. */
        jQuery('body').append(
            '\n\n<div id="'+this.domIDs.ct+'">\n'+
            '   <button id="'+this.domIDs.close+'">Cerrar</button><span id="'+this.domIDs.process+'"></span>\n'+
            '   <h1>Depurador de máquinas</h1>\n'+
            '   <div id="'+this.domIDs.ctSettings+'">\n'+
            '       <div id="'+this.domIDs.ctSelectors+'">\n'+
            selectorsDomCode+
            '       </div>\n'+
            '       <div id="'+this.domIDs.ctPhases+'">\n'+
            phasesCheckBoxesDomCode+
            '       </div>\n'+
            '   </div>\n'+
            '   <div id="'+this.domIDs.ctControls+'">\n'+
            '       <button id="'+this.domIDs.pause+'">Pausar</button><button id="'+this.domIDs.start+'">Iniciar</button>\n'+
            '   </div>\n'+
            '</div>\n'
        );

        /* Borramos los estilos en caso de haber duplicidad. */
        jQuery('#imcDebug-styles').remove();
        /* Estilos para el DOM de la aplicación. */
        jQuery('body').append(
            '<style type="text/css" id="imcDebug-styles">\n'+
            '#'+this.domIDs.ct+' {\n'+
            '    position      : fixed;\n'+
            '    top           : 10px;\n'+
            '    right         : 10px;\n'+ 
            '    border        : 1px solid #000;\n'+ 
            '    border-radius : 5px;\n'+ 
            '    padding       : 5px;\n'+
            '    background    : #f7faff;\n'+
            '    z-index       : 999999\n'+
            '}\n'+
            '#'+this.domIDs.ct+' *, -moz-focus-inner {\n'+
            '    font-family   : calibri;\n'+
            '    margin        : 0;\n'+
            '    padding       : 0;\n'+ 
            '}\n'+
            '#'+this.domIDs.ct+' button {\n'+
            '    cursor        : pointer;\n'+
            '    margin        : 0 5px;\n'+
            '    padding       : 3px 7px;\n'+ 
            '    border        : 2px solid skyblue;\n'+
            '    border-radius : 15px;\n'+ 
            '    background    : #fff;\n'+
            '    font-size     : 15px;\n'+
            '    font-weight   : bold;\n'+
            '    color         : skyblue;\n'+
            '    float         : right;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' button:hover {\n'+
            '    opacity       : 0.6;\n;'+
            '}\n'+
            '#'+this.domIDs.close+' {\n'+
            '    position      : absolute;\n'+
            '    margin        : 0!important;\n'+
            '    top           : 5px;\n'+
            '    right         : 5px;\n'+ 
            '    padding       : 2px 5px!important;\n'+
            '    font-size     : 11px!important;\n'+
            '}\n'+
            '#'+this.domIDs.ct+' h1 {\n'+
            '    font-size     : 20px;\n'+
            '    margin        : 5px 60px 10px 5px;\n'+
            '    color         : skyblue;\n'+ 
            '    border-radius : 5px;\n'+
            '    cursor        : move\n'+
            '}\n'+
            '#'+this.domIDs.ctSettings+' {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.ctSelectors+' {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.ctSelectors+' select {\n'+
            '    text-align    : right;\n'+
            '    font-size     : 16px;\n'+
            '}\n'+
            '#'+this.domIDs.ctPhases+' {\n'+
            '    margin        : 10px 0;\n'+
            '}\n'+
            '#'+this.domIDs.ctPhases+' checkbox {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.ctControls+' {\n'+
            '    overflow: hidden;\n'+
            '}\n'+
            '#'+this.domIDs.ctControls+' button {\n'+
            '    \n'+
            '}\n'+
            '#'+this.domIDs.process+' {\n'+
            '    position  : absolute;\n'+
            '    left      : 0;\n'+
            '    bottom    : 0;\n'+
            '    display   : none;\n'+
            '    font-size : 22px\n'+
            '}\n'+
            '</style>\n\n'
        );
        /* Deshabilitamos los selectores al inicio de la aplicación para evitar un seleccionamiento inesperado. */
        this.disableSelector(this.selectors.ns[0], true);

        var This = this;
        /* Evento onchange para los selectores */ 
        jQuery('#'+this.domIDs.ctSelectors).find('select').change(function(){

            var selectorNS = this.id.replace(/.*-/i, '');
            This.disableSelector(selectorNS, false)
                .doNextSelector(selectorNS, 'clearSelector');

            var amount   = jQuery(this).find('option:selected').text().match(/\(\d*\)/)[0].replace(/\(|\)/g,'');
            var modeloid = jQuery(this).find('option:selected').attr('modeloid');
            This.Controller.selectSelectorAction(selectorNS, this.value, amount, modeloid);

        });

        /* Evento onchange para los checbox */
        jQuery('#'+this.domIDs.ctPhases).find('input:checkbox').change(function(){

            var phaseNS = this.id.replace(/.*-/, '');
            This.Controller.checkedPhaseAction(phaseNS, this.checked);

        });

        /* Evento onclick para start */
        jQuery('#'+this.domIDs.start).click(function(){

            This.Controller.startDebuggingAction();

        });
    },
    
    /* Hace una acción ejecutando un método del objeto pasado por argumento y 
       pasandole el argumento argumentado.
       si es que aun hay otro selector inferior, ej. 'Tipo'->'Marca'->'Modelo' */
    doNextSelector: function(ns, methodName, arg) {
       var indexNS        = jQuery.inArray(ns, this.selectors.ns);
       var nextSelectorNS = this.selectors.ns[indexNS+1];
       if( nextSelectorNS ) {
           this[methodName](nextSelectorNS, arg);
       }
    },

    /* Llena las opciones de X selector con los datos argumentados en forma [{value:'',text:''},...] */
    fillSelector: function(selectorNS, data)
    {
        var $selector  = jQuery('#'+this.domIDs[selectorNS]);
        var selectorES = jQuery.inArray( selectorNS, this.selectors.ns );
            selectorES = this.selectors.es[selectorES];
        var str_modeloid = "";
        var options = '<option value="" selected="selected">Seleccione '+selectorES+' ('+data.splice(0,1)+')</option>';

        this.clearSelector(selectorNS)
            .disableSelector(selectorNS, true);

        jQuery.each(data, function(i, data) {
            if ( selectorNS == 'model' ) {
                str_modeloid = 'modeloid="'+data.modeloid+'"';
            }
            options += '<option value="'+data.value+'" '+str_modeloid+'>'+data.text+' ('+data.amount+')</option>';
        });
        
        $selector.append(options);

        this.disableSelector(selectorNS, false);

    },

    /* Limpia el selector argumentado y los que le siguen. */
    clearSelector: function(selectorNS) 
    {
        this.Controller.debugConfig.selectors[selectorNS] = '';
        var $selector = jQuery('#'+this.domIDs[selectorNS]);
        
        $selector.html('');
        this.doNextSelector(selectorNS, 'clearSelector');

        return this;
    },
    
    /* Deshabilita/habilita el selector argumentado y los que le siguen. */
    disableSelector: function(selectorNS, disable) 
    {
        var $selector = jQuery('#'+this.domIDs[selectorNS]);
        
        $selector.attr('disabled', disable);
        this.doNextSelector(selectorNS, 'disableSelector', true);

        return this;
    },

    showProcessIndicator: function(show) {

        var $process = jQuery('#'+this.domIDs.process);
        $process.text('');
        if ( show ) {
            var text = ' ...';
            var i    = 0;
            $process.css('display', 'inline');

            clearInterval(this.processInterval);
            this.processInterval = setInterval(function(){
                if( i+1 > text.length ) {
                    $process.text('');
                    i = 0;
                }
                $process.append(text.charAt(i++));

            }, 300);

        } else {
            $process.css('display', 'none');
            clearInterval(this.processInterval);
        }

    }
    
};

var imcDebug;
var scriptjQuery = document.createElement('script');
scriptjQuery.type= 'text/javascript';
scriptjQuery.src = 'https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js';
var scriptjQueryUI = document.createElement('script');
scriptjQueryUI.type= 'text/javascript';
scriptjQueryUI.src = 'https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js';

    /* Se inicializa el objeto de la aplicacion, se supone que el DOM ya esta
       listo al ejecutarlo en la pagina */ 
    if ( !window.jQuery ) {
        document.body.appendChild(scriptjQuery);

        scriptjQuery.onload = function() {
            createObjectImcDebug();
        }
    } else {
        createObjectImcDebug();
    }

    function createObjectImcDebug() {
        document.body.appendChild(scriptjQueryUI);
        scriptjQueryUI.onload = function() {
            imcDebug = new imcDebugController();
            $imcDebugView = jQuery('#'+imcDebug.view.domIDs.ct).draggable().draggable('option', 'handle', 'h1');
            $imcDebugView.bind('dragstart', function(){
                    jQuery(this).css('right', 'auto');
            });
        };    
    }